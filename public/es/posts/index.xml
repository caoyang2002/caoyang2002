<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on caoyang2002</title>
    <link>http://localhost:1313/es/posts/</link>
    <description>Recent content in Posts on caoyang2002</description>
    <generator>Hugo</generator>
    <language>es-ES</language>
    <atom:link href="http://localhost:1313/es/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>公告</title>
      <link>http://localhost:1313/es/post/2024/03/notice/</link>
      <pubDate>Thu, 21 Mar 2024 15:04:05 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/03/notice/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/cover/blue.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo-Focus 主题介绍</title>
      <link>http://localhost:1313/es/post/2025/01/hugo-focus-info/</link>
      <pubDate>Tue, 21 Jan 2025 01:53:21 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/hugo-focus-info/</guid>
      <description>&lt;h1 id=&#34;一简述&#34;&gt;一、简述&lt;/h1&gt;&#xA;&lt;p&gt;这是一个专注于编程的 Hugo 博客主题。&lt;/p&gt;&#xA;&lt;p&gt;参考了我此前为 &lt;code&gt;Typora&lt;/code&gt; 开发的 &#xA;&lt;a href=&#34;https://github.com/caoyang2002/Typora-Themes-Thompsgo&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   &lt;code&gt;Thompsgo&lt;/code&gt; 主题&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;二特性&#34;&gt;二、特性&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-运行代码&#34;&gt;1. 运行代码&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;支持的语言：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;python (wasm)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;lisp (JavaScript 实现的 Common Lisp (JSCL) 解释器)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cpp (playground)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;rust (playground)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;go (playground)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ts (TypeScript 的 JavaScript 实现)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;js (原生)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;短时间不会支持的语言（主要是没有找到 wasm 或 playground 支持）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;swift&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ruby&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-代码运行示例&#34;&gt;2. 代码运行示例&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;fn main() {&#xA;  println!(&amp;#34;Hello from Rust!&amp;#34;);&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;    &lt;div class=&#34;controls&#34;&gt;&#xA;        &lt;button class=&#34;run-button&#34;&gt;&#xA;            &lt;span style=&#34;display: flex; align-items: center; gap: 4px&#34;&#xA;                &gt;运行&lt;svg&#xA;                    t=&#34;1737473351499&#34;&#xA;                    class=&#34;icon&#34;&#xA;                    viewBox=&#34;0 0 1024 1024&#34;&#xA;                    version=&#34;1.1&#34;&#xA;                    xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;                    p-id=&#34;11262&#34;&#xA;                    width=&#34;16&#34;&#xA;                    height=&#34;16&#34;&#xA;                &gt;&#xA;                    &lt;path&#xA;                        d=&#34;M512 96C282.624 96 96 282.624 96 512s186.624 416 416 416 416-186.624 416-416S741.376 96 512 96z m0 768C317.92 864 160 706.08 160 512S317.92 160 512 160s352 157.92 352 352-157.92 352-352 352z&#34;&#xA;                        p-id=&#34;11263&#34;&#xA;                    &gt;&lt;/path&gt;&#xA;                    &lt;path&#xA;                        d=&#34;M466.816 324.96a32 32 0 0 0-50.816 25.888v339.776a32 32 0 0 0 50.816 25.856l233.6-169.888a32 32 0 0 0 0-51.776l-233.6-169.856z&#34;&#xA;                        p-id=&#34;11264&#34;&#xA;                    &gt;&lt;/path&gt;&#xA;                &lt;/svg&gt;&#xA;            &lt;/span&gt;&#xA;        &lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;output&#34; style=&#34;display: none&#34;&gt;&#xA;        &lt;pre class=&#34;output-content&#34;&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>作为独立开发者，你真的需要设计师吗？</title>
      <link>http://localhost:1313/es/post/2025/01/do_you_really_need_a_designer/</link>
      <pubDate>Mon, 20 Jan 2025 01:09:21 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/do_you_really_need_a_designer/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;有时候独立开发者想做一个产品，总觉得缺个 UI/UX 设计师，但囊中羞涩，想了想自己八字挺硬，于是做起了设计。&lt;/p&gt;&#xA;&lt;p&gt;但是，你为什么觉得自己需要一个设计师？&lt;/p&gt;&#xA;&lt;p&gt;我认为这是作为一个独立项目开发者需要想明白的问题。&lt;/p&gt;&#xA;&lt;p&gt;有时候，甚至是大多数时候你都不需要设计师。&lt;/p&gt;&#xA;&lt;p&gt;相反你应该花更多的时间想想这个产品为什么而存在。但这不是一篇教你挖掘需求或者产品设计的文章。所有的方法都只是设计的见解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mac 汇编笔记</title>
      <link>http://localhost:1313/es/post/2025/01/mac_assembly/</link>
      <pubDate>Sat, 18 Jan 2025 11:35:14 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/mac_assembly/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://evian-zhang.github.io/learn-assembly-on-Apple-Silicon-Mac/index.html&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://evian-zhang.github.io/learn-assembly-on-Apple-Silicon-Mac/index.html&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;梦开始的地方&#34;&gt;梦开始的地方&lt;/h1&gt;&#xA;&lt;h1 id=&#34;简单的-asm&#34;&gt;简单的 asm&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;null.s&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;.section    __TEXT,__text&#xA;.globl  _main&#xA;.p2align    2&#xA;_main:&#xA;mov    w0, #0&#xA;ret&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;int main() {&#xA;    return 0;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;as null.s -o null.o # 汇编&#xA;ld null.o -lSystem -L $(xcrun --show-sdk-path -sdk macosx)/usr/lib -o null # 链接（由于在 macOS 上不能创建静态链接的可执行文件，因此在链接时必须使用 -lSystem 动态链接上系统库。）&#xA;./null # 运行&#xA;&#xA;# or&#xA;clang null.s -o null&#xA;&#xA;# or&#xA;gcc null.s -o null&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;as&lt;/code&gt; 是 LLVM 的汇编器, &lt;code&gt;lldb&lt;/code&gt; 是 LLVM 的调试器。&#xA;&lt;code&gt;GCC&lt;/code&gt; 套件是 GNU 操作系统的一个部分，GNU 是开源的、社区驱动的。而 LLVM 项目也是开源的，现在主要是 Apple 在投资运行。因此，既然在 macOS 上，我就主要用的是 LLVM 系的工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>简述 Rust 中的闭包</title>
      <link>http://localhost:1313/es/post/2025/01/rust_closure_brief/</link>
      <pubDate>Wed, 15 Jan 2025 13:22:26 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/rust_closure_brief/</guid>
      <description>&lt;h1 id=&#34;为什么需要闭包&#34;&gt;为什么需要闭包？&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;// 问题1：函数复用&#xA;// 没有闭包时，需要传入所有参数&#xA;fn add(x: i32, base: i32) -&amp;gt; i32 { x &amp;#43; base }&#xA;&#xA;// 有了闭包，可以部分应用&#xA;let base = 5;&#xA;let add_five = |x| x &amp;#43; base;&#xA;&#xA;// 问题2：函数式编程需求&#xA;vec![1, 2, 3].iter().map(|x| x * 2);  // 更简洁&#xA;vec![1, 2, 3].iter().map(multiply);    // 需要单独定义函数&#xA;&#xA;// 问题3：上下文捕获&#xA;// 没有闭包时很难处理&#xA;struct Context { value: i32 }&#xA;let ctx = Context { value: 42 };&#xA;let use_context = || println!(&amp;#34;{}&amp;#34;, ctx.value);&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;闭包是什么&#34;&gt;闭包是什么？&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;闭包是可以捕获其环境的匿名函数&lt;/li&gt;&#xA;&lt;li&gt;它&amp;quot;封闭&amp;quot;了其定义时的环境，故称&amp;quot;闭包&amp;quot;&lt;/li&gt;&#xA;&lt;li&gt;闭包 = 函数 + 环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;闭包的优势&#34;&gt;闭包的优势&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;// 1. 简洁的语法&#xA;let add = |a, b| a &amp;#43; b;  // vs fn add(a: i32, b: i32) -&amp;gt; i32&#xA;&#xA;// 2. 灵活的环境捕获&#xA;let multiplier = 2;&#xA;let double = |x| x * multiplier;  // 捕获 multiplier&#xA;&#xA;// 3. 支持函数式编程&#xA;let numbers: Vec&amp;lt;i32&amp;gt; = vec![1, 2, 3, 4, 5];&#xA;let even_numbers: Vec&amp;lt;i32&amp;gt; = numbers&#xA;    .into_iter()&#xA;    .filter(|x| x % 2 == 0)&#xA;    .collect();&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;理解闭包&#34;&gt;理解闭包&lt;/h1&gt;&#xA;&lt;p&gt;我用 Python 和 TypeScript 的概念来解释 Rust 的闭包：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust 中的引用</title>
      <link>http://localhost:1313/es/post/2025/01/rust_ref/</link>
      <pubDate>Wed, 15 Jan 2025 11:57:02 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/rust_ref/</guid>
      <description>&lt;h1 id=&#34;引用你的快递地址和包裹&#34;&gt;引用：你的快递地址和包裹&lt;/h1&gt;&#xA;&lt;p&gt;想象这样一个场景：你在网上买了个漂亮的花瓶，快递公司需要把它送到你家。快递员需要知道两个信息：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;你家的地址（引用）&lt;/li&gt;&#xA;&lt;li&gt;花瓶本身（值）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;为什么我们需要引用&#34;&gt;为什么我们需要引用？&lt;/h2&gt;&#xA;&lt;p&gt;让我们看一个具体的问题：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;fn calculate_length(s: String) -&amp;gt; usize {&#xA;    s.len()&#xA;}&#xA;&#xA;let s = String::from(&amp;#34;hello&amp;#34;);&#xA;let len = calculate_length(s);&#xA;println!(&amp;#34;{}&amp;#34;, s); // 编译错误！s 已经被转移了所有权&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;这就像你把花瓶（值）直接给了快递员（函数），花瓶就不再属于你了。但很多时候，我们只是想让快递员看看花瓶，而不是把它拿走。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust 函数式编程</title>
      <link>http://localhost:1313/es/post/2025/01/rust_programming/</link>
      <pubDate>Wed, 15 Jan 2025 11:48:53 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/rust_programming/</guid>
      <description>&lt;p&gt;让我用这种方式来讲解 Rust 的函数式编程概念：&lt;/p&gt;&#xA;&lt;h1 id=&#34;引入问题&#34;&gt;引入问题&lt;/h1&gt;&#xA;&lt;p&gt;想象这样一个场景：你需要处理一个电商系统的订单数据。要求：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;过滤出金额大于 100 的订单&lt;/li&gt;&#xA;&lt;li&gt;计算这些订单的总金额&lt;/li&gt;&#xA;&lt;li&gt;给每个订单加上 10% 的折扣&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;传统的命令式编程可能是这样：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;let mut total = 0;&#xA;for order in orders {&#xA;    if order.amount &amp;gt; 100 {&#xA;        total &amp;#43;= order.amount * 0.9;&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;这段代码有什么问题？&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可读性不高：逻辑分散在循环中&lt;/li&gt;&#xA;&lt;li&gt;难以修改：如果要改变处理逻辑，需要修改循环内部&lt;/li&gt;&#xA;&lt;li&gt;难以复用：这段逻辑很难在其他地方重用&lt;/li&gt;&#xA;&lt;li&gt;易出错：可变状态(total)增加了出错风险&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;问题模型&#34;&gt;问题模型&lt;/h1&gt;&#xA;&lt;p&gt;我们需要一种方式能够：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust 生命周期</title>
      <link>http://localhost:1313/es/post/2025/01/rust_cyc/</link>
      <pubDate>Wed, 15 Jan 2025 11:41:27 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/rust_cyc/</guid>
      <description>&lt;p&gt;让我系统地分析 Rust 的生命周期：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;问题场景：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;// 考虑这个场景：我们需要返回一个引用&#xA;fn longest(x: &amp;amp;str, y: &amp;amp;str) -&amp;gt; &amp;amp;str {&#xA;    if x.len() &amp;gt; y.len() {&#xA;        x&#xA;    } else {&#xA;        y&#xA;    }&#xA;}&#xA;// 编译错误：missing lifetime specifier&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;这个特性是什么：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;生命周期是 Rust 的类型系统中用于确保引用有效性的一种机制&lt;/li&gt;&#xA;&lt;li&gt;它通过标注来告诉编译器多个引用之间的生命周期关系&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;导致这个特性出现的问题：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;// 问题1：悬垂引用&#xA;let r;&#xA;{&#xA;    let x = 5;&#xA;    r = &amp;amp;x;  // x 在这里就会被销毁&#xA;}&#xA;println!(&amp;#34;{}&amp;#34;, r);  // r 引用了已经无效的内存&#xA;&#xA;// 问题2：引用的有效期不明确&#xA;struct Person&amp;lt;&amp;#39;a&amp;gt; {&#xA;    name: &amp;amp;&amp;#39;a str  // 没有生命周期标注时，不知道这个引用能活多久&#xA;}&#xA;&#xA;// 问题3：函数返回引用时的所有权问题&#xA;fn return_ref(data: &amp;amp;str) -&amp;gt; &amp;amp;str {  // 返回引用时需要明确它的有效期&#xA;    data&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;解决方案分析：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;// 方案1：完全避免使用引用，使用所有权&#xA;struct Person {&#xA;    name: String  // 而不是 &amp;amp;str&#xA;}&#xA;// 优点：安全&#xA;// 缺点：性能开销，不够灵活&#xA;&#xA;// 方案2：生命周期标注&#xA;struct Person&amp;lt;&amp;#39;a&amp;gt; {&#xA;    name: &amp;amp;&amp;#39;a str&#xA;}&#xA;// 优点：既安全又灵活&#xA;// 缺点：语法复杂度增加&#xA;&#xA;// 方案3：使用智能指针&#xA;struct Person {&#xA;    name: Rc&amp;lt;String&amp;gt;&#xA;}&#xA;// 优点：灵活性高&#xA;// 缺点：运行时开销&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;最佳解决方案 - 生命周期标注：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;// 1. 函数中的生命周期标注&#xA;fn longest&amp;lt;&amp;#39;a&amp;gt;(x: &amp;amp;&amp;#39;a str, y: &amp;amp;&amp;#39;a str) -&amp;gt; &amp;amp;&amp;#39;a str {&#xA;    if x.len() &amp;gt; y.len() {&#xA;        x&#xA;    } else {&#xA;        y&#xA;    }&#xA;}&#xA;&#xA;// 2. 结构体中的生命周期标注&#xA;struct Book&amp;lt;&amp;#39;a&amp;gt; {&#xA;    title: &amp;amp;&amp;#39;a str,&#xA;    author: &amp;amp;&amp;#39;a str,&#xA;}&#xA;&#xA;// 3. impl 块中的生命周期标注&#xA;impl&amp;lt;&amp;#39;a&amp;gt; Book&amp;lt;&amp;#39;a&amp;gt; {&#xA;    fn get_title(&amp;amp;self) -&amp;gt; &amp;amp;str {&#xA;        self.title&#xA;    }&#xA;}&#xA;&#xA;// 4. 多个生命周期参数&#xA;fn complex&amp;lt;&amp;#39;a, &amp;#39;b&amp;gt;(x: &amp;amp;&amp;#39;a str, y: &amp;amp;&amp;#39;b str) -&amp;gt; &amp;amp;&amp;#39;a str {&#xA;    x&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;生命周期最佳实践：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;// 1. 生命周期省略规则&#xA;fn first_word(s: &amp;amp;str) -&amp;gt; &amp;amp;str {  // 隐含 &amp;lt;&amp;#39;a&amp;gt;&#xA;    // ...&#xA;}&#xA;&#xA;// 2. 静态生命周期&#xA;let static_str: &amp;amp;&amp;#39;static str = &amp;#34;I live forever&amp;#34;;&#xA;&#xA;// 3. 生命周期约束&#xA;fn print_type&amp;lt;T: Display &amp;#43; &amp;#39;static&amp;gt;(t: T) {&#xA;    println!(&amp;#34;{}&amp;#34;, t);&#xA;}&#xA;&#xA;// 4. 正确使用 &amp;#39;static&#xA;// 好的做法&#xA;const HELLO: &amp;amp;&amp;#39;static str = &amp;#34;Hello, world!&amp;#34;;&#xA;&#xA;// 避免过度使用 &amp;#39;static&#xA;// 不好的做法&#xA;fn bad_practice(data: &amp;amp;&amp;#39;static str) -&amp;gt; &amp;amp;&amp;#39;static str {&#xA;    data&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;7&#34;&gt;&#xA;&lt;li&gt;结论总结：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;生命周期是 Rust 独特的解决内存安全的机制&lt;/li&gt;&#xA;&lt;li&gt;它在编译时就能发现潜在的内存问题&lt;/li&gt;&#xA;&lt;li&gt;主要用途：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;防止悬垂引用&lt;/li&gt;&#xA;&lt;li&gt;确保引用的有效性&lt;/li&gt;&#xA;&lt;li&gt;管理数据的生存期&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;使用建议：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;优先使用生命周期省略规则&lt;/li&gt;&#xA;&lt;li&gt;需要时才显式标注&lt;/li&gt;&#xA;&lt;li&gt;谨慎使用 &amp;lsquo;static&lt;/li&gt;&#xA;&lt;li&gt;理解借用检查器的错误信息&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;通过这个特性，Rust 在编译时就能保证内存安全，而不需要运行时垃圾回收，这是它的一个重要优势。虽然生命周期标注增加了一些代码复杂度，但这是为了内存安全付出的必要成本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入理解 Rust 所有权机制</title>
      <link>http://localhost:1313/es/post/2025/01/rust_ownership/</link>
      <pubDate>Wed, 15 Jan 2025 11:38:20 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/rust_ownership/</guid>
      <description>&lt;h1 id=&#34;从一个常见问题说起&#34;&gt;从一个常见问题说起&lt;/h1&gt;&#xA;&lt;p&gt;看这段在其他语言中很普通的代码：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;fn main() {&#xA;    let data = vec![1, 2, 3];&#xA;    process_data(data);&#xA;    println!(&amp;#34;{:?}&amp;#34;, data);  // 编译错误！&#xA;}&#xA;&#xA;fn process_data(v: Vec&amp;lt;i32&amp;gt;) {&#xA;    println!(&amp;#34;Processing: {:?}&amp;#34;, v);&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;为什么这段代码在Rust中会报错？这就涉及到 Rust 最独特的特性：所有权系统。&lt;/p&gt;&#xA;&lt;h2 id=&#34;所有权的三条核心规则&#34;&gt;所有权的三条核心规则&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;每个值只能有一个所有者&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;所有者离开作用域，值将被丢弃&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;一个值同一时刻只能有一个所有者&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;让我们通过代码详细理解这些规则：&lt;/p&gt;&#xA;&lt;h3 id=&#34;规则1单一所有权&#34;&gt;规则1：单一所有权&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;let s1 = String::from(&amp;#34;hello&amp;#34;);&#xA;let s2 = s1;  // 所有权从s1转移到s2&#xA;// println!(&amp;#34;{}&amp;#34;, s1);  // 编译错误：s1已经失效&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;内存布局变化：&lt;/p&gt;</description>
    </item>
    <item>
      <title>rust 闭包</title>
      <link>http://localhost:1313/es/post/2025/01/rust_closure/</link>
      <pubDate>Wed, 15 Jan 2025 11:29:27 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/rust_closure/</guid>
      <description>&lt;h2 id=&#34;从一个常见问题说起&#34;&gt;从一个常见问题说起&lt;/h2&gt;&#xA;&lt;p&gt;假设你正在开发一个数据处理系统，需要对集合中的数据进行灵活的过滤和转换：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;let numbers = vec![1, 2, 3, 4, 5];&#xA;// 如何优雅地复用过滤逻辑？&#xA;let even_numbers = ??? // 这里怎么写&#xA;let multiplied_numbers = ??? // 这里怎么写&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;闭包的本质&#34;&gt;闭包的本质&lt;/h2&gt;&#xA;&lt;p&gt;Rust 的闭包本质上是一种特殊的数据结构，它包含：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;函数逻辑&lt;/li&gt;&#xA;&lt;li&gt;捕获的环境变量&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;让我们通过反编译来看闭包的真实面目：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;// 表面上的闭包&#xA;let multiplier = 2;&#xA;let closure = |x| x * multiplier;&#xA;&#xA;// 编译器实际生成的结构（简化版）&#xA;struct Closure {&#xA;    multiplier: i32,&#xA;}&#xA;&#xA;impl Closure {&#xA;    fn call(&amp;amp;self, x: i32) -&amp;gt; i32 {&#xA;        x * self.multiplier&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;闭包的三种类型&#34;&gt;闭包的三种类型&lt;/h2&gt;&#xA;&lt;p&gt;通过具体案例来理解三种闭包 trait：&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入解释 Rust 中的 Result 和 Option 这两个核心类型</title>
      <link>http://localhost:1313/es/post/2025/01/rust_result_option/</link>
      <pubDate>Wed, 15 Jan 2025 11:26:02 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/rust_result_option/</guid>
      <description>&lt;h1 id=&#34;从一个实际问题开始&#34;&gt;从一个实际问题开始&lt;/h1&gt;&#xA;&lt;p&gt;假设我们在写一个文件处理程序：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;fn read_config_file(path: &amp;amp;str) -&amp;gt; String {&#xA;    std::fs::read_to_string(path)  // 这里会返回什么？&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;这段代码看似简单，但隐藏着两个基本问题：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;文件可能不存在&lt;/li&gt;&#xA;&lt;li&gt;即使文件存在，读取过程也可能失败&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这就是为什么 Rust 引入了 &lt;code&gt;Result&lt;/code&gt; 和 &lt;code&gt;Option&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;option处理有与没有&#34;&gt;&lt;code&gt;Option&lt;/code&gt;：处理&amp;quot;有&amp;quot;与&amp;quot;没有&amp;quot;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;option-的本质&#34;&gt;&lt;code&gt;Option&lt;/code&gt; 的本质&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;enum Option&amp;lt;T&amp;gt; {&#xA;    Some(T),    // 有值&#xA;    None,       // 没有值&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;让我们看一个实际例子：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;fn find_user(id: u32) -&amp;gt; Option&amp;lt;User&amp;gt; {&#xA;    if id == 0 {&#xA;        None                    // 用户不存在&#xA;    } else {&#xA;        Some(User { id, ... })  // 用户存在&#xA;    }&#xA;}&#xA;&#xA;// 使用方式&#xA;match find_user(1) {&#xA;    Some(user) =&amp;gt; println!(&amp;#34;Found user: {}&amp;#34;, user.name),&#xA;    None =&amp;gt; println!(&amp;#34;User not found&amp;#34;),&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;h3 id=&#34;option-的常用方法&#34;&gt;&lt;code&gt;Option&lt;/code&gt; 的常用方法&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;let x: Option&amp;lt;i32&amp;gt; = Some(5);&#xA;&#xA;// 方法1：unwrap - 危险操作&#xA;let value1 = x.unwrap();  // 如果是 None 会 panic&#xA;&#xA;// 方法2：unwrap_or - 提供默认值&#xA;let value2 = x.unwrap_or(0);  // None 时返回0&#xA;&#xA;// 方法3：map - 变换内部值&#xA;let value3 = x.map(|n| n * 2);  // Some(5) -&amp;gt; Some(10)&#xA;&#xA;// 方法4：and_then - 链式操作&#xA;let value4 = x.and_then(|n| if n &amp;gt; 0 { Some(n) } else { None });&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;result处理成功与失败&#34;&gt;&lt;code&gt;Result&lt;/code&gt;：处理“成功”与“失败”&lt;/h2&gt;&#xA;&lt;h3 id=&#34;result-的本质&#34;&gt;&lt;code&gt;Result&lt;/code&gt; 的本质&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;enum Result&amp;lt;T, E&amp;gt; {&#xA;    Ok(T),    // 成功，包含值 T&#xA;    Err(E),   // 错误，包含错误 E&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;实际应用示例：&lt;/p&gt;</description>
    </item>
    <item>
      <title>rust 中的属性宏</title>
      <link>http://localhost:1313/es/post/2025/01/rust_macro/</link>
      <pubDate>Wed, 15 Jan 2025 11:16:52 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/rust_macro/</guid>
      <description>&lt;h1 id=&#34;deriveclone-debug-serialize-deserialize-eq-partialeq&#34;&gt;&lt;code&gt;#[derive(Clone, Debug, Serialize, Deserialize, Eq, PartialEq)]&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;这是 Rust 语言中的属性宏(attribute macro)声明，用于自动为数据结构实现一些常用的特性(traits)。让我详细解释每个部分：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;derive&lt;/code&gt; - 这是 Rust 的派生宏，用于自动生成特定 trait 的实现&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;括号里的每个特性具体作用是：&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Clone&lt;/code&gt; - 允许类型创建自身的深拷贝&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Debug&lt;/code&gt; - 实现格式化调试输出，使用 &lt;code&gt;{:?}&lt;/code&gt; 格式说明符可以打印该类型&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Serialize&lt;/code&gt; - 来自 serde 库，使类型可以被序列化(比如转换成 JSON)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Deserialize&lt;/code&gt; - 也来自 serde 库，使类型可以被反序列化(比如从 JSON 转换回来)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Eq&lt;/code&gt; - 实现完全相等比较&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;PartialEq&lt;/code&gt; - 实现部分相等比较，允许使用 &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt; 运算符&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这种写法可以让我们避免手动实现这些特性，编译器会自动为我们生成实现代码。这在定义数据结构时非常常用，特别是在需要序列化/反序列化数据的场景中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm 打印输出和浏览器特性等最佳实践</title>
      <link>http://localhost:1313/es/post/2025/01/wasm_print/</link>
      <pubDate>Wed, 15 Jan 2025 00:31:17 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/wasm_print/</guid>
      <description>&lt;p&gt;在 Rust WASM 中，有几种方式可以实现打印输出和调用浏览器特性：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用 &lt;code&gt;web_sys&lt;/code&gt; 和 &lt;code&gt;wasm_bindgen&lt;/code&gt; 进行浏览器 API 调用：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;use wasm_bindgen::prelude::*;&#xA;use web_sys::{console, window};&#xA;&#xA;pub fn move_test(name: &amp;amp;str) {&#xA;    // 控制台打印&#xA;    console::log_1(&amp;amp;JsValue::from_str(&amp;amp;format!(&amp;#34;move test: {}&amp;#34;, name)));&#xA;&#xA;    // 使用 console.warn&#xA;    console::warn_1(&amp;amp;JsValue::from_str(&amp;#34;This is a warning&amp;#34;));&#xA;&#xA;    // 使用 console.error&#xA;    console::error_1(&amp;amp;JsValue::from_str(&amp;#34;This is an error&amp;#34;));&#xA;&#xA;    // 浏览器 alert&#xA;    if let Some(window) = window() {&#xA;        window&#xA;            .alert_with_message(&amp;amp;format!(&amp;#34;Hello, {}!&amp;#34;, name))&#xA;            .expect(&amp;#34;alert failed&amp;#34;);&#xA;    }&#xA;&#xA;    // 确认对话框&#xA;    if let Some(window) = window() {&#xA;        if window&#xA;            .confirm_with_message(&amp;#34;Do you want to continue?&amp;#34;)&#xA;            .expect(&amp;#34;confirm failed&amp;#34;)&#xA;        {&#xA;            console::log_1(&amp;amp;JsValue::from_str(&amp;#34;User clicked OK&amp;#34;));&#xA;        } else {&#xA;            console::log_1(&amp;amp;JsValue::from_str(&amp;#34;User clicked Cancel&amp;#34;));&#xA;        }&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;在 Cargo.toml 中需要添加必要的依赖：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[dependencies]&#xA;wasm-bindgen = &amp;#34;0.2&amp;#34;&#xA;web-sys = { version = &amp;#34;0.3&amp;#34;, features = [&#xA;    &amp;#34;console&amp;#34;,&#xA;    &amp;#34;Window&amp;#34;,&#xA;    &amp;#34;Document&amp;#34;,&#xA;    &amp;#34;Element&amp;#34;,&#xA;    &amp;#34;HtmlElement&amp;#34;,&#xA;    &amp;#34;Node&amp;#34;,&#xA;    &amp;#34;Location&amp;#34;&#xA;]}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;如果需要格式化打印，可以使用 &lt;code&gt;console::log!&lt;/code&gt; 宏：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;use web_sys::console;&#xA;&#xA;// 需要引入宏&#xA;#[macro_export]&#xA;macro_rules! console_log {&#xA;    ($($t:tt)*) =&amp;gt; (console::log_1(&amp;amp;JsValue::from_str(&amp;amp;format!($($t)*))))&#xA;}&#xA;&#xA;pub fn move_test(name: &amp;amp;str) {&#xA;    console_log!(&amp;#34;Testing move with name: {}&amp;#34;, name);&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;操作 DOM 示例：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;use wasm_bindgen::prelude::*;&#xA;use web_sys::{Document, Element, HtmlElement, window};&#xA;&#xA;pub fn move_test(name: &amp;amp;str) {&#xA;    // 获取 document&#xA;    let window = window().expect(&amp;#34;no global window exists&amp;#34;);&#xA;    let document = window.document().expect(&amp;#34;no document exists&amp;#34;);&#xA;&#xA;    // 创建新元素&#xA;    if let Some(div) = document.get_element_by_id(&amp;#34;test-input&amp;#34;) {&#xA;        // 修改输入框的值&#xA;        if let Some(input) = div.dyn_ref::&amp;lt;HtmlElement&amp;gt;() {&#xA;            input.set_inner_text(&amp;amp;format!(&amp;#34;New value: {}&amp;#34;, name));&#xA;        }&#xA;    }&#xA;&#xA;    // 创建新元素&#xA;    let new_div = document.create_element(&amp;#34;div&amp;#34;).unwrap();&#xA;    new_div.set_text_content(Some(&amp;amp;format!(&amp;#34;Hello {}&amp;#34;, name)));&#xA;&#xA;    // 添加到 body&#xA;    if let Some(body) = document.body() {&#xA;        body.append_child(&amp;amp;new_div).unwrap();&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;处理错误和 Result：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;pub fn move_test(name: &amp;amp;str) -&amp;gt; Result&amp;lt;(), JsValue&amp;gt; {&#xA;    // 使用 ? 运算符处理错误&#xA;    let window = window().ok_or(&amp;#34;no global window exists&amp;#34;)?;&#xA;    let document = window.document().ok_or(&amp;#34;no document exists&amp;#34;)?;&#xA;&#xA;    // 处理可能的错误&#xA;    match document.get_element_by_id(&amp;#34;test-input&amp;#34;) {&#xA;        Some(element) =&amp;gt; {&#xA;            console::log_1(&amp;amp;JsValue::from_str(&amp;amp;format!(&amp;#34;Found element: {}&amp;#34;, name)));&#xA;            Ok(())&#xA;        },&#xA;        None =&amp;gt; Err(JsValue::from_str(&amp;#34;Element not found&amp;#34;))&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;使用本地存储：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;rust&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-rust&#34;&gt;use web_sys::Storage;&#xA;&#xA;pub fn move_test(name: &amp;amp;str) -&amp;gt; Result&amp;lt;(), JsValue&amp;gt; {&#xA;    let window = window().ok_or(&amp;#34;no global window exists&amp;#34;)?;&#xA;&#xA;    // 获取 localStorage&#xA;    if let Some(storage) = window.local_storage()? {&#xA;        // 存储数据&#xA;        storage.set_item(&amp;#34;user_name&amp;#34;, name)?;&#xA;&#xA;        // 读取数据&#xA;        if let Ok(Some(saved_name)) = storage.get_item(&amp;#34;user_name&amp;#34;) {&#xA;            console::log_1(&amp;amp;JsValue::from_str(&amp;amp;format!(&amp;#34;Saved name: {}&amp;#34;, saved_name)));&#xA;        }&#xA;    }&#xA;&#xA;    Ok(())&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;记住在使用任何 web-sys 功能时，需要在 Cargo.toml 中启用相应的 feature。例如，如果要使用 localStorage，需要添加 &amp;ldquo;Storage&amp;rdquo; feature：&lt;/p&gt;</description>
    </item>
    <item>
      <title>更好的 vim 配置</title>
      <link>http://localhost:1313/es/post/2025/01/vim_config/</link>
      <pubDate>Tue, 07 Jan 2025 13:48:33 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/vim_config/</guid>
      <description>&lt;p&gt;~ ⌚ 13:47:21&#xA;$ cat .vimrc&#xA;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;&amp;quot; 显示相关&lt;/p&gt;&#xA;&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;set shortmess=atI   &amp;quot; 启动的时候不显示那个援助乌干达儿童的提示&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;winpos 5 5          &amp;quot; 设定窗口位置&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;set lines=40 columns=155    &amp;quot; 设定窗口大小&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;set nu              &amp;quot; 显示行号&lt;/p&gt;&#xA;&lt;p&gt;set go=             &amp;quot; 不要图形按钮&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;color asmanian2     &amp;quot; 设置背景主题&lt;/p&gt;&#xA;&lt;p&gt;set guifont=Courier_New:h10:cANSI   &amp;quot; 设置字体&lt;/p&gt;&#xA;&lt;p&gt;syntax on           &amp;quot; 语法高亮&lt;/p&gt;&#xA;&lt;p&gt;autocmd InsertLeave * se nocul  &amp;quot; 用浅色高亮当前行&lt;/p&gt;&#xA;&lt;p&gt;autocmd InsertEnter * se cul    &amp;quot; 用浅色高亮当前行&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;set ruler           &amp;quot; 显示标尺&lt;/p&gt;&#xA;&lt;p&gt;set showcmd         &amp;quot; 输入的命令显示出来，看的清楚些&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;set cmdheight=1     &amp;quot; 命令行（在状态行下）的高度，设置为1&lt;/p&gt;</description>
    </item>
    <item>
      <title>更好的 zsh 配置</title>
      <link>http://localhost:1313/es/post/2025/01/ssh_config_best/</link>
      <pubDate>Tue, 07 Jan 2025 13:33:19 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/ssh_config_best/</guid>
      <description>&lt;h1 id=&#34;zsh-配置&#34;&gt;zsh 配置&lt;/h1&gt;&#xA;&lt;h2 id=&#34;安装-oh-my-zsh&#34;&gt;安装 oh my zsh&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;配置 &lt;code&gt;.zshrc&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&#xA;# If you come from bash you might have to change your $PATH.&#xA;# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH&#xA;&#xA;# Path to your Oh My Zsh installation.&#xA;export ZSH=&amp;#34;$HOME/.oh-my-zsh&amp;#34;&#xA;&#xA;# Set name of the theme to load --- if set to &amp;#34;random&amp;#34;, it will&#xA;# load a random theme each time Oh My Zsh is loaded, in which case,&#xA;# to know which specific one was loaded, run: echo $RANDOM_THEME&#xA;# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes&#xA;# ZSH_THEME=&amp;#34;robbyrussell&amp;#34;&#xA;ZSH_THEME=&amp;#34;amuse&amp;#34;&#xA;# theme:&#xA;# git: xiong-chiamiov-plus amuse powerlevel10k&#xA;# time: crunch&#xA;&#xA;# Set list of themes to pick from when loading at random&#xA;# Setting this variable when ZSH_THEME=random will cause zsh to load&#xA;# a theme from this variable instead of looking in $ZSH/themes/&#xA;# If set to an empty array, this variable will have no effect.&#xA;# ZSH_THEME_RANDOM_CANDIDATES=( &amp;#34;robbyrussell&amp;#34; &amp;#34;agnoster&amp;#34; )&#xA;&#xA;# Uncomment the following line to use case-sensitive completion.&#xA;# CASE_SENSITIVE=&amp;#34;true&amp;#34;&#xA;&#xA;# Uncomment the following line to use hyphen-insensitive completion.&#xA;# Case-sensitive completion must be off. _ and - will be interchangeable.&#xA;# HYPHEN_INSENSITIVE=&amp;#34;true&amp;#34;&#xA;&#xA;# Uncomment one of the following lines to change the auto-update behavior&#xA;# zstyle &amp;#39;:omz:update&amp;#39; mode disabled  # disable automatic updates&#xA;# zstyle &amp;#39;:omz:update&amp;#39; mode auto      # update automatically without asking&#xA;# zstyle &amp;#39;:omz:update&amp;#39; mode reminder  # just remind me to update when it&amp;#39;s time&#xA;&#xA;# Uncomment the following line to change how often to auto-update (in days).&#xA;# zstyle &amp;#39;:omz:update&amp;#39; frequency 13&#xA;&#xA;# Uncomment the following line if pasting URLs and other text is messed up.&#xA;# DISABLE_MAGIC_FUNCTIONS=&amp;#34;true&amp;#34;&#xA;&#xA;# Uncomment the following line to disable colors in ls.&#xA;# DISABLE_LS_COLORS=&amp;#34;true&amp;#34;&#xA;&#xA;# Uncomment the following line to disable auto-setting terminal title.&#xA;# DISABLE_AUTO_TITLE=&amp;#34;true&amp;#34;&#xA;&#xA;# Uncomment the following line to enable command auto-correction.&#xA;# ENABLE_CORRECTION=&amp;#34;true&amp;#34;&#xA;&#xA;# Uncomment the following line to display red dots whilst waiting for completion.&#xA;# You can also set it to another string to have that shown instead of the default red dots.&#xA;# e.g. COMPLETION_WAITING_DOTS=&amp;#34;%F{yellow}waiting...%f&amp;#34;&#xA;# Caution: this setting can cause issues with multiline prompts in zsh &amp;lt; 5.7.1 (see #5765)&#xA;# COMPLETION_WAITING_DOTS=&amp;#34;true&amp;#34;&#xA;&#xA;# Uncomment the following line if you want to disable marking untracked files&#xA;# under VCS as dirty. This makes repository status check for large repositories&#xA;# much, much faster.&#xA;# DISABLE_UNTRACKED_FILES_DIRTY=&amp;#34;true&amp;#34;&#xA;&#xA;# Uncomment the following line if you want to change the command execution time&#xA;# stamp shown in the history command output.&#xA;# You can set one of the optional three formats:&#xA;# &amp;#34;mm/dd/yyyy&amp;#34;|&amp;#34;dd.mm.yyyy&amp;#34;|&amp;#34;yyyy-mm-dd&amp;#34;&#xA;# or set a custom format using the strftime function format specifications,&#xA;# see &amp;#39;man strftime&amp;#39; for details.&#xA;# HIST_STAMPS=&amp;#34;mm/dd/yyyy&amp;#34;&#xA;&#xA;# Would you like to use another custom folder than $ZSH/custom?&#xA;# ZSH_CUSTOM=/path/to/new-custom-folder&#xA;&#xA;# Which plugins would you like to load?&#xA;# Standard plugins can be found in $ZSH/plugins/&#xA;# Custom plugins may be added to $ZSH_CUSTOM/plugins/&#xA;# Example format: plugins=(rails git textmate ruby lighthouse)&#xA;# Add wisely, as too many plugins slow down shell startup.&#xA;plugins=(&#xA;  git&#xA;  extract&#xA;  autojump&#xA;  zsh-autosuggestions&#xA;  zsh-syntax-highlighting&#xA;)&#xA;&#xA;source $ZSH/oh-my-zsh.sh&#xA;&#xA;# User configuration&#xA;&#xA;# export MANPATH=&amp;#34;/usr/local/man:$MANPATH&amp;#34;&#xA;&#xA;# You may need to manually set your language environment&#xA;# export LANG=en_US.UTF-8&#xA;&#xA;export EDITOR=&amp;#39;vim&amp;#39;&#xA;&#xA;# Preferred editor for local and remote sessions&#xA;# if [[ -n $SSH_CONNECTION ]]; then&#xA;#   export EDITOR=&amp;#39;vim&amp;#39;&#xA;# else&#xA;#   export EDITOR=&amp;#39;nvim&amp;#39;&#xA;# fi&#xA;&#xA;# Compilation flags&#xA;# export ARCHFLAGS=&amp;#34;-arch $(uname -m)&amp;#34;&#xA;&#xA;# Set personal aliases, overriding those provided by Oh My Zsh libs,&#xA;# plugins, and themes. Aliases can be placed here, though Oh My Zsh&#xA;# users are encouraged to define aliases within a top-level file in&#xA;# the $ZSH_CUSTOM folder, with .zsh extension. Examples:&#xA;# - $ZSH_CUSTOM/aliases.zsh&#xA;# - $ZSH_CUSTOM/macos.zsh&#xA;# For a full list of active aliases, run `alias`.&#xA;#&#xA;# Example aliases&#xA;# alias zshconfig=&amp;#34;mate ~/.zshrc&amp;#34;&#xA;# alias ohmyzsh=&amp;#34;mate ~/.oh-my-zsh&amp;#34;&#xA;&#xA;&#xA;# IDEA path&#xA;#&#xA;&#xA;# PATH env&#xA;source &amp;#34;$HOME/.cargo/env&amp;#34;&#xA;# for autojump https://github.com/wting/autojump&#xA;[ -f /opt/homebrew/etc/profile.d/autojump.sh ] &amp;amp;&amp;amp; . /opt/homebrew/etc/profile.d/autojump.sh&#xA;&#xA;# fnm&#xA;# fnm&#xA;FNM_PATH=&amp;#34;$HOME/.local/share/fnm&amp;#34;&#xA;if [ -d &amp;#34;$FNM_PATH&amp;#34; ]; then&#xA;  export PATH=&amp;#34;$FNM_PATH:$PATH&amp;#34;&#xA;  eval &amp;#34;`fnm env`&amp;#34;&#xA;fi&#xA;&#xA;# IDEA path&#xA;export PATH=&amp;#34;/Applications/IntelliJ IDEA CE.app/Contents/MacOS:$PATH&amp;#34;&#xA;export PATH=&amp;#34;/opt/homebrew/opt/dotnet@6/bin:$PATH&amp;#34;&#xA;export PATH=&amp;#34;/home/simons/.local/bin:$PATH&amp;#34;&#xA;export PATH=&amp;#34;/Users/simons/.yarn/bin:/Users/simons/.config/yarn/global:$PATH&amp;#34;&#xA;&#xA;# pnpm&#xA;export PNPM_HOME=&amp;#34;/Users/simons/Library/pnpm&amp;#34;&#xA;case &amp;#34;:$PATH:&amp;#34; in&#xA;  *&amp;#34;:$PNPM_HOME:&amp;#34;*) ;;&#xA;  *) export PATH=&amp;#34;$PNPM_HOME:$PATH&amp;#34; ;;&#xA;esac&#xA;# pnpm end&#xA;#&#xA;#&#xA;&#xA;# poetry&#xA;export PATH=&amp;#34;$HOME/.local/bin:$PATH&amp;#34;&#xA;&#xA;# go&#xA;export PATH=&amp;#34;$PATH:$GOPATH/bin&amp;#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;配置-github&#34;&gt;配置 Github&lt;/h1&gt;&#xA;&lt;h2 id=&#34;生成密钥对&#34;&gt;生成密钥对&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;# 生成一对 SSH 密钥&#xA;ssh-keygen -t ed25519 -C &amp;#34;your_email@example.com&amp;#34; # 输入邮箱&#xA;# 启动 SSH 代理，用于管理 SSH 密钥&#xA;eval &amp;#34;$(ssh-agent -s)&amp;#34;&#xA;# 将 SSH 私钥添加到 SSH 代理&#xA;ssh-add ~/.ssh/id_ed25519&#xA;# 显示公钥内容&#xA;cat ~/.ssh/id_ed25519.pub&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;配置-ssh-密钥&#34;&gt;配置 SSH 密钥：&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将公钥内容复制并添加到 GitHub 的 SSH 密钥设置中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm</title>
      <link>http://localhost:1313/es/post/2025/01/wasm/</link>
      <pubDate>Sun, 05 Jan 2025 12:41:17 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/wasm/</guid>
      <description>&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cargo build&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;webassembly-核心技术剖析&#34;&gt;WebAssembly 核心技术剖析&lt;/h1&gt;&#xA;&lt;p&gt;让我用一个具体场景开始：你正在用 JavaScript 开发一个视频编码器，却发现即使用上了 Web Worker，处理 4K 视频时依然卡得厉害。为什么？问题出在哪里？&lt;/p&gt;&#xA;&lt;h2 id=&#34;深入理解-wasm-的本质&#34;&gt;深入理解 WASM 的本质&lt;/h2&gt;&#xA;&lt;p&gt;首先，我们需要理解 WASM 的核心 - 它的内存模型和执行模型。&lt;/p&gt;&#xA;&lt;h3 id=&#34;内存模型解析&#34;&gt;内存模型解析&lt;/h3&gt;&#xA;&lt;p&gt;让我们看一段具体代码：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;cpp&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-cpp&#34;&gt;// C&amp;#43;&amp;#43; 代码&#xA;int* buffer = new int[1024];  // 分配4KB内存&#xA;buffer[0] = 42;&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;编译成 WASM 后：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Aptos Wasm 开发笔记</title>
      <link>http://localhost:1313/es/post/2025/01/aptos-wasm/</link>
      <pubDate>Sun, 05 Jan 2025 11:08:24 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/aptos-wasm/</guid>
      <description>&lt;h1 id=&#34;起因&#34;&gt;起因&lt;/h1&gt;&#xA;&lt;p&gt;最近有一个项目需要使用到 Apots 的 Move 开发环境，但是官方并没有提供 Move-2 的 Wasm，出于对技术的“狂热”，决定自己学一下这个技术的实现。&lt;/p&gt;&#xA;&lt;p&gt;对于我来说，可以了解到 Rust 和 Move 的编译原理，这是一个很好的机会，虽然我从来没正式写过 Rust 和 Move。&lt;/p&gt;&#xA;&lt;h1 id=&#34;开始&#34;&gt;开始&lt;/h1&gt;&#xA;&lt;p&gt;我看不懂 &lt;code&gt;aptos-core&lt;/code&gt; 从的功能，但我没有一开始就尝试编译这整个项目，而是在 &lt;code&gt;aptos-core/third_party&lt;/code&gt; 看到了 &lt;code&gt;move&lt;/code&gt; 编译器相关的东西，所以我就从这里开始。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo 主题创建方法及简单说明</title>
      <link>http://localhost:1313/es/post/2025/01/create_hugo_theme/</link>
      <pubDate>Fri, 03 Jan 2025 11:11:07 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2025/01/create_hugo_theme/</guid>
      <description>&lt;h1 id=&#34;参考&#34;&gt;参考：&lt;/h1&gt;&#xA;&lt;p&gt;中文文档 &#xA;&lt;a href=&#34;https://hugo.opendocs.io/getting-started/quick-start/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://hugo.opendocs.io/getting-started/quick-start/&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;博客：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://blog.gujiakai.top/2023/03/hugo-theme-development-diary&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://blog.gujiakai.top/2023/03/hugo-theme-development-diary&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://juejin.cn/post/7151253414427492382&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://juejin.cn/post/7151253414427492382&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;一个简单的-hugo-主题&#34;&gt;一个简单的 Hugo 主题&lt;/h1&gt;&#xA;&lt;h2 id=&#34;创建一个空的网站模版&#34;&gt;创建一个空的网站模版&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo new site demo&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;这会在当前目录创建一个名为 &lt;code&gt;demo&lt;/code&gt; 的目录，然后初始化 &lt;code&gt;hugo&lt;/code&gt; 的目录结构，&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建一个空的主题模版&#34;&gt;创建一个空的主题模版&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd demo&#xA;hugo new theme hugo-zero&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;得到输出信息：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-&#34; data-lang=&#34;&#34;&gt;Creating theme at /hugo/demo/themes/hugo-zero&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;一开始的目录结构如下图所示：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo-zero（hugo主题）&#xA;├── archetypes（hugo主题文章模板）&#xA;├── layouts（hugo主题布局文件）&#xA;├── static（hugo主题的静态文件）&#xA;├── LICENSE（hugo主题的许可证信息）&#xA;└── themes.toml（hugo主题的元数据信息）&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;其中，重点关注layouts文件夹。剩余的文件可以慢慢补充。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 最佳实践</title>
      <link>http://localhost:1313/es/post/2024/12/go/</link>
      <pubDate>Sun, 29 Dec 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/12/go/</guid>
      <description>&lt;p&gt;在 Go 项目架构中，有一些重要的设计原则和规则。我来详细说明：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;接口定义规则：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;go&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-go&#34;&gt;// ✅ 正确：接口定义在使用方(调用方)包中&#xA;package handler&#xA;type UserService interface {&#xA;    Create(ctx context.Context, user *User) error&#xA;}&#xA;&#xA;// ❌ 错误：接口定义在实现方包中&#xA;package service&#xA;type UserService interface {&#xA;    Create(ctx context.Context, user *User) error&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;依赖方向：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;go&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-go&#34;&gt;// ✅ 正确的依赖方向&#xA;handler -&amp;gt; service -&amp;gt; repository -&amp;gt; database&#xA;&#xA;// ❌ 错误：不应该出现反向依赖&#xA;service -&amp;gt; handler&#xA;repository -&amp;gt; service&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;数据模型定义：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;go&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-go&#34;&gt;// ✅ 正确：每层使用自己的数据模型&#xA;package handler&#xA;type CreateUserRequest struct {  // API层模型&#xA;    Username string `json:&amp;#34;username&amp;#34;`&#xA;}&#xA;&#xA;package service&#xA;type UserDTO struct {  // 业务层模型&#xA;    ID       uint64&#xA;    Username string&#xA;}&#xA;&#xA;package repository&#xA;type UserDO struct {  // 数据层模型&#xA;    ID        uint64 `gorm:&amp;#34;primaryKey&amp;#34;`&#xA;    Username  string&#xA;    CreatedAt time.Time&#xA;}&#xA;&#xA;// ❌ 错误：直接在所有层使用相同的模型&#xA;type User struct {&#xA;    ID        uint64 `json:&amp;#34;id&amp;#34; gorm:&amp;#34;primaryKey&amp;#34;`&#xA;    Username  string `json:&amp;#34;username&amp;#34;`&#xA;    CreatedAt time.Time `json:&amp;#34;created_at&amp;#34;`&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;错误处理层级：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;go&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-go&#34;&gt;// ✅ 正确：每层对错误进行适当包装&#xA;package repository&#xA;func (r *UserRepo) Create(user *UserDO) error {&#xA;    return fmt.Errorf(&amp;#34;database error: %w&amp;#34;, err)&#xA;}&#xA;&#xA;package service&#xA;func (s *UserService) Create(user *UserDTO) error {&#xA;    return fmt.Errorf(&amp;#34;business error: %w&amp;#34;, err)&#xA;}&#xA;&#xA;package handler&#xA;func (h *UserHandler) Create(c *gin.Context) {&#xA;    if err := h.service.Create(user); err != nil {&#xA;        c.JSON(getErrorStatus(err), ErrorResponse{err.Error()})&#xA;        return&#xA;    }&#xA;}&#xA;&#xA;// ❌ 错误：直接暴露底层错误&#xA;if err := db.Create(&amp;amp;user).Error; err != nil {&#xA;    c.JSON(500, err.Error())&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;包的组织：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-&#34; data-lang=&#34;&#34;&gt;✅ 正确的包组织：&#xA;project/&#xA;  ├── api/&#xA;  │   └── handler/       # HTTP 处理层&#xA;  ├── internal/&#xA;  │   ├── service/      # 业务逻辑层&#xA;  │   ├── repository/   # 数据访问层&#xA;  │   └── model/        # 内部数据模型&#xA;  ├── pkg/&#xA;  │   └── util/         # 公共工具函数&#xA;  └── main.go&#xA;&#xA;❌ 错误的包组织：&#xA;project/&#xA;  ├── handlers/&#xA;  ├── services/&#xA;  ├── models/&#xA;  └── main.go&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;依赖注入：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;go&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-go&#34;&gt;// ✅ 正确：通过构造函数注入依赖&#xA;func NewUserHandler(service UserService) *UserHandler {&#xA;    return &amp;amp;UserHandler{service: service}&#xA;}&#xA;&#xA;// ❌ 错误：全局变量或直接初始化&#xA;var userService = &amp;amp;UserService{}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;7&#34;&gt;&#xA;&lt;li&gt;接口隔离：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;go&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-go&#34;&gt;// ✅ 正确：小接口，职责单一&#xA;type UserReader interface {&#xA;    GetUser(id uint64) (*User, error)&#xA;}&#xA;&#xA;type UserWriter interface {&#xA;    CreateUser(user *User) error&#xA;}&#xA;&#xA;// ❌ 错误：大接口，职责过多&#xA;type UserService interface {&#xA;    GetUser(id uint64) (*User, error)&#xA;    CreateUser(user *User) error&#xA;    UpdateUser(user *User) error&#xA;    DeleteUser(id uint64) error&#xA;    ListUsers() ([]*User, error)&#xA;    SearchUsers(query string) ([]*User, error)&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;8&#34;&gt;&#xA;&lt;li&gt;配置管理：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;go&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-go&#34;&gt;// ✅ 正确：集中管理配置&#xA;package config&#xA;&#xA;type Config struct {&#xA;    Server ServerConfig&#xA;    DB     DatabaseConfig&#xA;    Redis  RedisConfig&#xA;}&#xA;&#xA;// ❌ 错误：分散的配置或硬编码&#xA;var serverPort = 8080&#xA;var dbConnection = &amp;#34;root:password@tcp(localhost:3306)/db&amp;#34;&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;9&#34;&gt;&#xA;&lt;li&gt;上下文传递：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;go&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-go&#34;&gt;// ✅ 正确：统一使用 context 传递请求上下文&#xA;func (h *Handler) Create(c *gin.Context) {&#xA;    ctx := c.Request.Context()&#xA;    err := h.service.Create(ctx, req)&#xA;}&#xA;&#xA;// ❌ 错误：不传递上下文或使用不一致的上下文&#xA;func (h *Handler) Create(c *gin.Context) {&#xA;    err := h.service.Create(req)&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;ol start=&#34;10&#34;&gt;&#xA;&lt;li&gt;测试组织：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;go&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-go&#34;&gt;// ✅ 正确：测试文件与源文件对应&#xA;package handler&#xA;&#xA;func TestUserHandler_Create(t *testing.T) {&#xA;    // 单元测试&#xA;}&#xA;&#xA;// ❌ 错误：测试代码与源码混合或测试覆盖不全&#xA;func TestAll(t *testing.T) {&#xA;    // 混合测试多个功能&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;遵循这些规则可以使代码：&lt;/p&gt;</description>
    </item>
    <item>
      <title>营销</title>
      <link>http://localhost:1313/es/post/2024/12/decision_paralysis/</link>
      <pubDate>Sun, 29 Dec 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/12/decision_paralysis/</guid>
      <description>&lt;h1 id=&#34;决策瘫痪&#34;&gt;决策瘫痪&lt;/h1&gt;&#xA;&lt;p&gt;同行的朋友都觉得这样的菜单隐隐让自己很不舒服，不知道该选什么。但他们都让老板推荐了几个菜之后开始吃起来，忘记了刚刚“不舒服”的选择过程。而我却无法容忍这种模糊的感觉，希望探究一下背后的道理。然后想着想着，突然想到了很久之前看过的一个心理学实验：&lt;/p&gt;&#xA;&lt;p&gt;研究人员随机找了 2 组消费者，在两组面前都呈现了一系列昂贵的果酱，并且给他们提供试吃机会和优惠券。不同的是A组消费者面前摆着 6 款不同的果酱，B 组消费者面前摆着 24 种不同的果酱。&lt;/p&gt;</description>
    </item>
    <item>
      <title>资源</title>
      <link>http://localhost:1313/es/post/2024/12/resource/</link>
      <pubDate>Sun, 29 Dec 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/12/resource/</guid>
      <description>&lt;h1 id=&#34;如何找资源&#34;&gt;如何找资源&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;下载&#xA;&#xA;&lt;a href=&#34;https://www.pansou.vip/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   盘搜&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://pansoso.com/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   盘搜搜&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://www.dashengpan.com/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   大圣盘&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://t.me/jisou&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   TG机器人&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://aliso.cc/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   阿里搜&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;一我维护的其他站&#34;&gt;一、我维护的其他站&lt;/h1&gt;&#xA;&lt;h2 id=&#34;move-学习&#34;&gt;Move 学习&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;http://43.138.107.218/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   move&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;二编程相关内容&#34;&gt;二、编程相关内容&lt;/h1&gt;&#xA;&lt;h2 id=&#34;各种镜像收录&#34;&gt;各种镜像收录&lt;/h2&gt;&#xA;&lt;iframe src=&#34;http://fishros.com/#/fish_home&#34; width=&#34;100%&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;&#xA;&lt;p&gt;iframe src=&amp;ldquo;&#xA;&lt;a href=&#34;http://www.yishimei.cn/%22&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   http://www.yishimei.cn/&#34;&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA; width=&amp;ldquo;100%&amp;rdquo; height=&amp;ldquo;600&amp;rdquo;&amp;gt;&lt;/iframe&gt;&lt;/p&gt;&#xA;&lt;iframe src=&#34;http://doc.vrd.net.cn/&#34; width=&#34;100%&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;&#xA;&lt;iframe src=&#34;https://sms-activate.org/cn/getNumber&#34; width=&#34;100%&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;&#xA;&lt;iframe src=&#34;https://pan.oldming.top/&#34; width=&#34;100%&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;&#xA;&lt;iframe src=&#34;https://res.yunpan.win/&#34; width=&#34;100%&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;&#xA;&lt;iframe src=&#34;https://cplusplus.com/reference/&#34; width=&#34;100%&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;&#xA;&lt;iframe src=&#34;https://www.coursera.org/&#34; width=&#34;100%&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;&#xA;&lt;p&gt;NPS: http://101.43.125.94:20002/&#xA;DS220j-SSH: http://101.43.125.94:20010/&#xA;DS220j-DSM: http://101.43.125.94:20011/&lt;/p&gt;&#xA;&lt;p&gt;Windows10: http://101.43.125.94:20020/&lt;/p&gt;</description>
    </item>
    <item>
      <title>hugo 配置</title>
      <link>http://localhost:1313/es/post/2024/12/about_hugo_config/</link>
      <pubDate>Sun, 22 Dec 2024 18:12:52 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/12/about_hugo_config/</guid>
      <description>&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;# 基础优化配置&#xA;enableGitInfo = true                # 启用 Git 信息,可以显示文章的最后修改时间&#xA;hasCJKLanguage = true              # 启用中日韩文字支持,能准确统计字数&#xA;summaryLength = 140                # 文章摘要长度&#xA;&#xA;# SEO 优化&#xA;[params]&#xA;keywords = [&amp;#34;博客&amp;#34;,&amp;#34;技术&amp;#34;,&amp;#34;编程&amp;#34;]    # 网站关键词&#xA;description = &amp;#34;个人技术博客&amp;#34;        # 网站描述&#xA;images = [&amp;#34;site-feature-image.jpg&amp;#34;] # 默认社交媒体分享图片&#xA;# 自定义 Open Graph 信息&#xA;[params.og]&#xA;title = &amp;#34;我的博客&amp;#34;&#xA;type = &amp;#34;website&amp;#34;&#xA;images = [&amp;#34;og-image.jpg&amp;#34;]&#xA;&#xA;# 性能优化&#xA;[minify]&#xA;  disableCSS = false               # 启用 CSS 压缩&#xA;  disableHTML = false              # 启用 HTML 压缩&#xA;  disableJS = false                # 启用 JS 压缩&#xA;  disableJSON = false              # 启用 JSON 压缩&#xA;  minifyOutput = true              # 压缩 HTML 输出&#xA;&#xA;# 图片处理&#xA;[imaging]&#xA;  quality = 75                     # JPEG 图片质量&#xA;  resampleFilter = &amp;#34;Lanczos&amp;#34;       # 图片重采样过滤器&#xA;  anchor = &amp;#34;Smart&amp;#34;                 # 图片裁剪锚点&#xA;&#xA;# 内容安全策略&#xA;[params.csp]&#xA;  childsrc = [&amp;#34;&amp;#39;self&amp;#39;&amp;#34;]&#xA;  fontsrc = [&amp;#34;&amp;#39;self&amp;#39;&amp;#34;, &amp;#34;https://fonts.gstatic.com&amp;#34;, &amp;#34;https://cdn.jsdelivr.net&amp;#34;]&#xA;  formaction = [&amp;#34;&amp;#39;self&amp;#39;&amp;#34;]&#xA;  framesrc = [&amp;#34;&amp;#39;self&amp;#39;&amp;#34;]&#xA;  imgsrc = [&amp;#34;&amp;#39;self&amp;#39;&amp;#34;]&#xA;  objectsrc = [&amp;#34;&amp;#39;none&amp;#39;&amp;#34;]&#xA;  stylesrc = [&amp;#34;&amp;#39;self&amp;#39;&amp;#34;, &amp;#34;&amp;#39;unsafe-inline&amp;#39;&amp;#34;]&#xA;  scriptsrc = [&amp;#34;&amp;#39;self&amp;#39;&amp;#34;, &amp;#34;&amp;#39;unsafe-inline&amp;#39;&amp;#34;, &amp;#34;&amp;#39;unsafe-eval&amp;#39;&amp;#34;]&#xA;&#xA;# 文章配置&#xA;[permalinks]&#xA;  posts = &amp;#34;/post/:year/:month/:slug/&amp;#34;    # 自定义文章 URL 结构&#xA;&#xA;# 自定义输出格式&#xA;[outputs]&#xA;  home = [&amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;, &amp;#34;JSON&amp;#34;]         # 支持 JSON API 输出&#xA;  section = [&amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;]&#xA;  taxonomy = [&amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;]&#xA;  term = [&amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;]&#xA;&#xA;# RSS 订阅配置&#xA;[params.rss]&#xA;  limit = 20                             # RSS 文章数量限制&#xA;  fullContent = true                     # RSS 包含完整文章内容&#xA;&#xA;# 站内搜索配置&#xA;[outputs]&#xA;  home = [&amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;, &amp;#34;JSON&amp;#34;, &amp;#34;SearchIndex&amp;#34;]&#xA;[outputFormats.SearchIndex]&#xA;  mediaType = &amp;#34;application/json&amp;#34;&#xA;  baseName = &amp;#34;searchindex&amp;#34;&#xA;  isPlainText = true&#xA;  notAlternative = true&#xA;&#xA;# 文章目录配置&#xA;[markup.tableOfContents]&#xA;  endLevel = 3                           # 目录最大深度&#xA;  ordered = false                        # 使用无序列表&#xA;  startLevel = 2                         # 目录开始层级&#xA;&#xA;# 代码高亮配置&#xA;[markup.highlight]&#xA;  codeFences = true                      # 启用代码围栏&#xA;  guessSyntax = true                    # 自动推测代码语言&#xA;  lineNoStart = 1                        # 起始行号&#xA;  lineNos = true                         # 显示行号&#xA;  lineNumbersInTable = true              # 使用表格式行号&#xA;  tabWidth = 4                           # 制表符宽度&#xA;  style = &amp;#34;monokai&amp;#34;                      # 代码高亮主题&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;一些重要的最佳实践建议：&lt;/p&gt;</description>
    </item>
    <item>
      <title>从 Hexo 迁移至 Hugo</title>
      <link>http://localhost:1313/es/post/2024/12/my-first-post/</link>
      <pubDate>Sun, 22 Dec 2024 18:12:52 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/12/my-first-post/</guid>
      <description>&lt;h1 id=&#34;再见hexo从hexo迁移至hugo&#34;&gt;再见Hexo——从Hexo迁移至Hugo&lt;/h1&gt;&#xA;&lt;p&gt;16 年的时候，博客使用的虚拟主机需要做迁移，当时所使用的 Typecho 是一个依赖于数据库的 PHP 博客系统，数据导出过程很艰辛。彼时 Gihub Pages 正大火，我也就跟风转投了静态博客系统 Hexo 。七年过去了，博客还在，但折腾 Hexo 的人是越来越少了。如今我也要和 Hexo 说声再见，拥抱 Hugo 的怀抱了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么改用hugo&#34;&gt;为什么改用Hugo&lt;/h2&gt;&#xA;&lt;h3 id=&#34;依赖管理问题&#34;&gt;依赖管理问题&lt;/h3&gt;&#xA;&lt;p&gt;在&#xA;&lt;a href=&#34;https://easonyang.com/2021/07/10/how-to-sync-and-backup-a-static-blog/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   静态博客的同步和备份方案&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;一文中，我分享了基于 Github 和 iCloud 的同步备份方案，期望在保证数据安全的同时，写作环境可以在我的两台电脑上无缝切换。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 Hexo&#43;GitHub&#43;Vercel 搭建个人免费博客的最佳实践</title>
      <link>http://localhost:1313/es/post/2024/12/hexo/</link>
      <pubDate>Sun, 22 Dec 2024 18:12:52 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/12/hexo/</guid>
      <description>&lt;p&gt;我的博客之前是在云服务器上部署的java服务，现在把博客迁移到了github托管，使用&#xA;&lt;a href=&#34;https://hexo.io/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   Hexo&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;以及主题&#xA;&lt;a href=&#34;https://theme-next.js.org/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   Theme NexT&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;，&#xA;在源码仓库通过hexo会生成静态html文件，通过github action部署到网站仓库。网站仓库自动部署到&#xA;&lt;a href=&#34;https://vercel.com/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   vercel&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;作为一个把Hexo、NexT官网的文档看了一个遍的人，我想我可以写一篇文章总结一下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>shell mac 教程</title>
      <link>http://localhost:1313/es/post/2024/11/shell_mac_pop/</link>
      <pubDate>Sat, 09 Nov 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/11/shell_mac_pop/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://juejin.cn/post/6921144388802641933&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   原文&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-as&#34; data-lang=&#34;as&#34;&gt;#!/bin/bash&#xA;&#xA;# 1. 自定义通知消息&#xA;# 传参 $1:消息描述 $2:通知标题 $3:通知副标题&#xA;function showNoteMessage(){&#xA;  osascript -e &amp;#34;display notification \&amp;#34;${1}\&amp;#34; with title \&amp;#34;${2}\&amp;#34; subtitle \&amp;#34;${3}\&amp;#34; sound name \&amp;#34;Funk\&amp;#34;&amp;#34;&#xA;}&#xA;#test case:&#xA;#showNoteMessage &amp;#34;消息内容&amp;#34; &amp;#34;通知&amp;#34; &amp;#34;通知副标题&amp;#34;&#xA;&#xA;# 2. 自定义弹窗(统一通用方法)&#xA;# 传参$1 弹窗消息内容&#xA;# 传参$2 弹窗标题&#xA;# 传参$3 按钮标题,多个用英文逗号隔开&#xA;# 传参$4 默认选中的按钮标题或者按钮数字下标&#xA;# 传参$5 是否为输入框类型 传&amp;#34;0&amp;#34;或者&amp;#34;1&amp;#34; 默认&amp;#34;0&amp;#34;&#xA;# 传参$6 输入框默认占位内容,传不传无所谓,默认为空字符串 &amp;#34;&amp;#34;&#xA;# 传参$7 默认图标note/stop/caution 或者自定义文件路径(:格式路径可以通过choose file获取)&#xA;# tips: 重要! 如果为输入框模式,那么输出结果就是{button returned:button,text returned:text} 否则只有按钮或者false&#xA;function showCustomAlertMessage(){&#xA;&#xA;if [[ -n &amp;#34;$4&amp;#34; ]]; then&#xA;&#xA;&#x9;if [[ ${4} == *[!0-9]* ]]; then&#xA;     &#x9;defaultButton=&amp;#34;default button \&amp;#34;${4}\&amp;#34;&amp;#34;&#xA;     &#x9;else&#xA;     &#x9;defaultButton=&amp;#34;default button ${4}&amp;#34;&#xA;&#x9;fi&#xA;else&#xA;&#x9;defaultButton=&amp;#34;&amp;#34;&#xA;fi&#xA;&#xA;#是否为输入框模式&#xA;if [[ &amp;#34;$5&amp;#34; = &amp;#34;1&amp;#34; ]]; then&#xA;&#x9;IS_InputMode=&amp;#34;default answer \&amp;#34;${6}\&amp;#34;&amp;#34;&#xA;&#x9;ReturnValue=&amp;#34;get result&amp;#34;&#xA;else&#xA;&#x9;IS_InputMode=&amp;#34;&amp;#34;&#xA;&#x9;ReturnValue=&amp;#34;get the button returned of the result&amp;#34;&#xA;fi&#xA;&#xA;if [[ -n &amp;#34;$7&amp;#34; ]]; then&#xA;  case ${7} in&#xA;&#x9;note)&#xA;&#x9;ICON=&amp;#34;with icon note&amp;#34;&#xA;&#x9;;;&#xA;&#x9;stop)&#xA;&#x9;ICON=&amp;#34;with icon stop&amp;#34;&#xA;&#x9;;;&#xA;&#x9;caution)&#xA;&#x9;ICON=&amp;#34;with icon caution&amp;#34;&#xA;&#x9;;;&#xA;&#x9;*)&#xA;&#x9;ICON=&amp;#34;with icon file \&amp;#34;${7}\&amp;#34;&amp;#34;&#xA;&#x9;;;&#xA; esac&#xA;else&#xA; ICON=&amp;#34;with icon file \&amp;#34;Macintosh HD:Applications:Xcode.app:Contents:Resources:Xcode.icns\&amp;#34;&amp;#34;&#xA;fi&#xA;&#xA;osascript &amp;lt;&amp;lt;EOF&#xA;&#x9;set buttonStr to &amp;#34;${3}&amp;#34;&#xA;&#x9;set oldDelimiters to AppleScript&amp;#39;s text item delimiters&#xA;&#x9;set AppleScript&amp;#39;s text item delimiters to &amp;#34;,&amp;#34;&#xA;&#x9;set buttonList to every text item of buttonStr&#xA;&#x9;set AppleScript&amp;#39;s text item delimiters to oldDelimiters&#xA;&#x9;get buttonList&#xA;&#x9;set btns to buttonList&#xA;&#x9;display dialog &amp;#34;${1}&amp;#34; with title &amp;#34;${2}&amp;#34; buttons btns ${IS_InputMode} ${defaultButton} ${ICON}&#xA;&#x9;${ReturnValue}&#xA;EOF&#xA;}&#xA;&#xA;# showCustomAlertMessage &amp;#34;弹窗消息内容&amp;#34; &amp;#34;弹窗标题&amp;#34; &amp;#34;按钮1,按钮2,按钮3&amp;#34; &amp;#34;按钮2&amp;#34;  &amp;#34;1&amp;#34; &amp;#34;占位内容&amp;#34; &amp;#34;note&amp;#34;&#xA;# showCustomAlertMessage &amp;#34;弹窗消息内容&amp;#34; &amp;#34;弹窗标题&amp;#34; &amp;#34;按钮1,按钮2,按钮3&amp;#34; 2  &amp;#34;0&amp;#34; &amp;#34;占位内容&amp;#34; &amp;#34;note&amp;#34;&#xA;#showCustomAlertMessage &amp;#34;弹窗消息内容&amp;#34; &amp;#34;弹窗标题&amp;#34; &amp;#34;按钮1,按钮2,按钮3&amp;#34; &amp;#34;按钮2&amp;#34; &amp;#34;0&amp;#34; &amp;#34;占位内容&amp;#34; &amp;#34;stop&amp;#34;&#xA;#showCustomAlertMessage &amp;#34;弹窗消息内容&amp;#34; &amp;#34;弹窗标题&amp;#34; &amp;#34;按钮1,按钮2,按钮3&amp;#34; &amp;#34;按钮2&amp;#34; &amp;#34;0&amp;#34; &amp;#34;占位内容&amp;#34; &amp;#34;Macintosh HD:Applications:Xcode.app:Contents:Resources:Xcode.icns&amp;#34;&#xA;&#xA;# 普通弹窗 一个ok就够了 就是一个确认的那种&#xA;function onlyConfirmButton(){&#xA;&#x9;showCustomAlertMessage &amp;#34;$1&amp;#34; &amp;#34;温馨提示&amp;#34; &amp;#34;好的&amp;#34; 1&#xA;}&#xA;#onlyConfirmButton &amp;#34;登录成功!\n弹窗成功!&amp;#34;&#xA;&#xA;# 多按钮弹窗 最多三个按钮 多了会报错&#xA;function mostButtons(){&#xA;&#x9;showCustomAlertMessage &amp;#34;$1&amp;#34; &amp;#34;温馨提示&amp;#34; &amp;#34;按钮1,按钮2,按钮3&amp;#34; &amp;#34;按钮3&amp;#34;&#xA;}&#xA;#mostButtons &amp;#34;最多只能定义三个按钮哦&amp;#34;&#xA;&#xA;# 输入框弹窗&#xA;function showInputAlertMessage(){&#xA;&#x9;showCustomAlertMessage &amp;#34;$1&amp;#34; &amp;#34;$2&amp;#34; &amp;#34;取消,确认&amp;#34; 2 &amp;#34;1&amp;#34; &amp;#34;&amp;#34;&#xA;}&#xA;showInputAlertMessage &amp;#34;请输入密码&amp;#34; &amp;#34;登录验证&amp;#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>谷歌账号注册的问题</title>
      <link>http://localhost:1313/es/post/2024/07/google_account/</link>
      <pubDate>Wed, 17 Jul 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/07/google_account/</guid>
      <description>&lt;p&gt;参考：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://www.gmail777.com/archives/69&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   中州西鹿&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://blog.csdn.net/huayanhuicui/article/details/137236352&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   多图详细教你注册Google（Gmail）新账号，常见问题和注意事项&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;a href=&#34;https://uzbox.com/usa/google-add-tel.html&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   此电话号码已用过太多次，此电话号码无法用于进行验证 谷歌账号无法注册解决方法&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;谷歌账号注册的问题&#34;&gt;谷歌账号注册的问题&lt;/h1&gt;&#xA;&lt;h2 id=&#34;注册&#34;&gt;注册&lt;/h2&gt;&#xA;&lt;p&gt;通过google主页或直接访问 Gmail 主页，选择登录，在登录的时候选择“创建账号”，一般选个人用途就可以了。选好了以后点击下一步。耗时3秒&lt;/p&gt;</description>
    </item>
    <item>
      <title>C 语言字符画</title>
      <link>http://localhost:1313/es/post/2024/06/c_shar/</link>
      <pubDate>Sat, 29 Jun 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/06/c_shar/</guid>
      <description>&lt;blockquote&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;3&#xA;* * *&#xA;*   *&#xA;* * *&#xA;&#xA;4&#xA;* * * *&#xA;*     *&#xA;*     *&#xA;* * * *&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;非多组输入&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;//行定位&#xA;int main() {&#xA;    int n = 0;&#xA;    scanf(&amp;#34;%d&amp;#34;, &amp;amp;n);&#xA;    for (int i = 0; i &amp;lt; n; &amp;#43;&amp;#43;i) {&#xA;        if (i == 0 || i == n - 1) {//首尾行输出一行*&#xA;            for (int j = 0; j &amp;lt; n; &amp;#43;&amp;#43;j) {&#xA;                printf(&amp;#34;* &amp;#34;);&#xA;            }&#xA;        } else {&#xA;            for (int j = 0; j &amp;lt; n; &amp;#43;&amp;#43;j) {//其它行首尾输出*&#xA;                if(j==0 || j == n-1)&#xA;                    printf(&amp;#34;* &amp;#34;);&#xA;                else&#xA;                    printf(&amp;#34;  &amp;#34;);&#xA;            }&#xA;        }&#xA;        printf(&amp;#34;\n&amp;#34;);//换行&#xA;    }&#xA;&#xA;    return 0;&#xA;}&#xA;&#xA;// 3 ---- n&#xA;// * * *  --- 1行每个位置都输出 一共n个&#xA;// *   *  --- 其它行1和n位置输出 一共2个&#xA;// * * *  --- n行每个位置都输出 一共n个&#xA;// 思路：&#xA;// 使用for 和 if&#xA;// 判断是不吃首尾行 是则输出一行* 不是则输出首尾*&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多组输入&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;//行和列定位&#xA;int main() {&#xA;    int n = 0;&#xA;    while(scanf(&amp;#34;%d&amp;#34;, &amp;amp;n) == 1){//输入的数量为1&#xA;        for (int i = 0; i &amp;lt; n; &amp;#43;&amp;#43;i) {//控制行&#xA;            for (int j = 0; j &amp;lt; n; &amp;#43;&amp;#43;j) {//控制列&#xA;                if(i == 0 || i == n-1 || j == 0 || j == n-1)//第0行，第n-1行，第0列，第n-1列输出 *_,其它位置输出 __&#xA;                    printf(&amp;#34;* &amp;#34;);&#xA;                else&#xA;                    printf(&amp;#34;  &amp;#34;);&#xA;            }&#xA;            printf(&amp;#34;\n&amp;#34;);&#xA;        }&#xA;    }&#xA;    return 0;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>如何生成 dll 文件</title>
      <link>http://localhost:1313/es/post/2024/06/dl/</link>
      <pubDate>Sat, 29 Jun 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/06/dl/</guid>
      <description>&lt;h1 id=&#34;如何生成-dll文件&#34;&gt;如何生成 .dll文件&lt;/h1&gt;&#xA;&lt;p&gt;生成dll文件同时会生成lib文件&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在VS开始界面，搜索dll，创建dll动态链接库&lt;/li&gt;&#xA;&lt;li&gt;创建一个类（右键创建类，会自动包含需要的文件） 以查询目录下的文件为例&#xA;创建的文件可以不用管&#xA;&lt;code&gt;.cpp&lt;/code&gt;文件 输入自己的代码&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;cpp&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-cpp&#34;&gt;#include &amp;#34;pch.h&amp;#34;&#xA;#include &amp;#34;check_repository.h&amp;#34;&#xA;namespace fs = std::filesystem;&#xA;    int Check::CheckRepository() {&#xA;        std::string folderName = &amp;#34;.Rysigy&amp;#34;;&#xA;        fs::path currentPath = fs::current_path();&#xA;        fs::path folderPath = currentPath / folderName;&#xA;&#xA;        if (fs::exists(folderPath) &amp;amp;&amp;amp; fs::is_directory(folderPath)) {&#xA;            std::cout &amp;lt;&amp;lt; &amp;#34;存储库 &amp;#39;.Rysigy&amp;#39; 文件夹存在\n&amp;#34; &amp;lt;&amp;lt; std::endl;&#xA;        }&#xA;        else {&#xA;            std::cout &amp;lt;&amp;lt; &amp;#34;[错误]\t存储库 &amp;#39;.Rysigy&amp;#39; 文件夹不存在\n请在右键菜单中点击 &amp;#39;创建存储库&amp;#39;\n&amp;#34; &amp;lt;&amp;lt; std::endl;&#xA;        }&#xA;        std::cout &amp;lt;&amp;lt; &amp;#34;点击任意按键退出...&amp;#34; &amp;lt;&amp;lt; std::endl;&#xA;        _getch();&#xA;        return 0;&#xA;};&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;.h&lt;/code&gt;文件&lt;/p&gt;</description>
    </item>
    <item>
      <title>删除错误提交到GitHub仓库中的文件</title>
      <link>http://localhost:1313/es/post/2024/06/git_delete_file/</link>
      <pubDate>Wed, 19 Jun 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/06/git_delete_file/</guid>
      <description>&lt;p&gt;如果你需要删除错误提交到GitHub仓库中的文件，你可以通过以下步骤来创建一个新的提交来撤销之前的更改：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;在本地仓库中删除文件&lt;/strong&gt;：&#xA;首先，在你的本地仓库中删除该文件：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git rm --cached &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;这里 &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; 是你想要从仓库中删除的文件名。&lt;code&gt;--cached&lt;/code&gt; 参数意味着仅从Git的跟踪中删除文件，而不删除工作目录中的文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TG 下载器</title>
      <link>http://localhost:1313/es/post/2024/05/download_telegram/</link>
      <pubDate>Wed, 29 May 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/05/download_telegram/</guid>
      <description>&lt;h1 id=&#34;软件&#34;&gt;软件&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/tangyoha/telegram_media_downloader/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://github.com/tangyoha/telegram_media_downloader/&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;在-elease-里面下载可执行程序&#34;&gt;在 elease 里面下载可执行程序&lt;/h2&gt;&#xA;&lt;h1 id=&#34;win&#34;&gt;Win&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.caoyang2002.top/usr/uploads/2024/03/348142121.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/tangyoha/telegram_media_downloader/releases/download/v2.2.3/tdl-v2.2.3-win64.zip&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://github.com/tangyoha/telegram_media_downloader/releases/download/v2.2.3/tdl-v2.2.3-win64.zip&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;linux-x86_64&#34;&gt;Linux （x86_64)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.caoyang2002.top/usr/uploads/2024/03/4255088993.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/tangyoha/telegram_media_downloader/releases/download/v2.2.1/tdl-v2.2.1-linux-amd64.zip&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://github.com/tangyoha/telegram_media_downloader/releases/download/v2.2.1/tdl-v2.2.1-linux-amd64.zip&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;mac&#34;&gt;mac&lt;/h1&gt;&#xA;&lt;p&gt;没有测试&#xA;&#xA;&lt;a href=&#34;https://github.com/tangyoha/telegram_media_downloader/releases/download/v2.2.1/tdl-v2.2.1-macos.zip&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://github.com/tangyoha/telegram_media_downloader/releases/download/v2.2.1/tdl-v2.2.1-macos.zip&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;配置&#34;&gt;配置&lt;/h1&gt;&#xA;&lt;p&gt;所有配置都通过 config.yaml 文件传递​​给 &lt;code&gt;Telegram Media Downloader&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;获取您的 API 密钥：&lt;/strong&gt;&#xA;第一步需要您获得有效的 Telegram API 密钥（API id/hash pair）：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;访问 &#xA;&lt;a href=&#34;https://my.telegram.org/apps&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://my.telegram.org/apps&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA; 并使用您的 Telegram 帐户登录。&lt;/li&gt;&#xA;&lt;li&gt;填写表格以注册新的 Telegram 应用程序。&lt;/li&gt;&#xA;&lt;li&gt;完成！ API 密钥由两部分组成：&lt;strong&gt;api_id&lt;/strong&gt; 和&lt;strong&gt;api_hash&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;获取聊天ID：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>x86 教程</title>
      <link>http://localhost:1313/es/post/2024/05/x86/</link>
      <pubDate>Thu, 02 May 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/05/x86/</guid>
      <description>&lt;p&gt;作者： &#xA;&lt;a href=&#34;http://www.ruanyifeng.com/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   阮一峰&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;日期： &#xA;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2018/01/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   2018年1月21日&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;学习编程其实就是学高级语言，即那些为人类设计的计算机语言。&lt;/p&gt;&#xA;&lt;p&gt;但是，计算机不理解高级语言，必须通过编译器转成二进制代码，才能运行。学会高级语言，并不等于理解计算机实际的运行步骤。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://mielgo-markdown.oss-cn-chengdu.aliyuncs.com/bg2018012204.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;计算机真正能够理解的是低级语言，它专门用来控制硬件。汇编语言就是低级语言，直接描述/控制 CPU 的运行。如果你想了解 CPU 到底干了些什么，以及代码的运行步骤，就一定要学习汇编语言。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 教程</title>
      <link>http://localhost:1313/es/post/2024/04/sql/</link>
      <pubDate>Mon, 29 Apr 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/04/sql/</guid>
      <description>&lt;p style=color:red;&gt; 在idea中分号并不是必须加的, 在执行多条语句才必须加, 在控制台使用的时候必须加&lt;p&gt;&#xA;&lt;h1 id=&#34;数据库相关的操作&#34;&gt;数据库相关的操作&lt;/h1&gt;&#xA;&lt;p&gt;查询数据库&#x9; &lt;code&gt;SHOW DATABASES&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;创建数据库&#xA;&lt;code&gt;CREATE DATABASE 数据库名&lt;/code&gt;&#xA;&lt;code&gt;CREATE DATABASE mydatabase&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;查看数据库信息&#xA;&lt;code&gt;SHOW CREATE DATABASE 数据库名&lt;/code&gt;&#xA;&lt;code&gt;SHOW CREATE DATABASE database&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;删除数据库&#xA;&lt;code&gt;DROP DATABASE 数据库名&lt;/code&gt;&#xA;&lt;code&gt;DROP DATABASE mydatabase&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用数据库&#xA;&lt;code&gt;USE 数据库名&lt;/code&gt;&#xA;&lt;code&gt;USE mydatabase&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;ddl语句-数据定义语言&#34;&gt;DDL语句&#x9; 数据定义语言&lt;/h1&gt;&#xA;&lt;p&gt;创建表&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;CREATE TABLE 表名(&#xA;   列名1 类型[长度] [DEFAULT 默认值] [约束条件]&#xA;   列名2 类型&#xA;   ……&#xA;);&#xA;&#xA;CREATE TABLE userinfo(&#xA;   id INT&#xA;   username VARCHAR(32)&#xA;   password VARCHAR(32)&#xA;   nickname VARCHAR(32)&#xA;   age INT(3)&#xA;);&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;查看当前数据库创建的所有表&#xA;&lt;code&gt;SHOW TABLES;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>什么是 SimHash</title>
      <link>http://localhost:1313/es/post/2024/04/simhash/</link>
      <pubDate>Mon, 29 Apr 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/04/simhash/</guid>
      <description>&lt;h1 id=&#34;一什么是simhash&#34;&gt;一、什么是SimHash&lt;/h1&gt;&#xA;&lt;p&gt;SimHash算法是Google在2007年发表的论文《Detecting Near-Duplicates for Web Crawling》中提到的一种指纹生成算法，被应用在Google搜索引擎网页去重的工作之中。&lt;/p&gt;&#xA;&lt;p&gt;对于文本去重这个问题，常见的解决办法有余弦算法、欧式距离、Jaccard相似度、最长公共子串等方法。但是这些方法并不能对海量数据高效的处理。&#xA;比如说，在搜索引擎中，会有很多相似的关键词，用户所需要获取的内容是相似的，但是搜索的关键词却是不同的，如“北京好吃的火锅“和”哪家北京的火锅好吃“，是两个可以等价的关键词，然而通过普通的hash计算，会产生两个相差甚远的hash串。而通过SimHash计算得到的Hash串会非常的相近，从而可以判断两个文本的相似程度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>创建一个远程编译环境</title>
      <link>http://localhost:1313/es/post/2024/04/a_code_env/</link>
      <pubDate>Mon, 29 Apr 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/04/a_code_env/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;我使用的是 Mac，所以以下都是 Mac 的说明&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;一前端tsreact&#34;&gt;一、前端（ts、react）&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;前端配置：TypeScript、React&#xA;依赖项：axios、codemirror、react-codemirror2&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;1-初始化模板&#34;&gt;1. 初始化模板&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;任意选一个就行&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;11-交互式&#34;&gt;1.1 交互式&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm init vite&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;可能需要先安装&#xA;&lt;code&gt;npm install vite --save-dev&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-&#34; data-lang=&#34;&#34;&gt;caoyang@cccy del % npm init vite&#xA;# 使用 上下键 选择&#xA;✔ Project name: … playground  # playground 是项目名称，它会创建一个该名称的文件夹作为项目根目录&#xA;✔ Select a framework: › React  # 使用 React 库&#xA;✔ Select a variant: › TypeScript  # 使用 TS 语言开发&#xA;&#xA;Scaffolding project in /Users/caoyang/Documents/Aptos/del/playground...&#xA;&#xA;Done. Now run:&#xA;&#xA;# 需要先运行以下代码&#xA;  cd playground&#xA;  npm install&#xA;  npm run dev&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h3 id=&#34;12-一键创建&#34;&gt;1.2 一键创建&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm init vite playground -- --template react-ts&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;或者&lt;/p&gt;</description>
    </item>
    <item>
      <title>报税记账</title>
      <link>http://localhost:1313/es/post/2024/04/compent/</link>
      <pubDate>Mon, 29 Apr 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/04/compent/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;以下是我回忆的, 所以没有截图教程&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;报税网址&#34;&gt;报税网址&lt;/h1&gt;&#xA;&lt;h2 id=&#34;四川省电子税务局&#34;&gt;四川省电子税务局&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这个主要是企业报税用的&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://etax.sichuan.chinatax.gov.cn/loginb/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://etax.sichuan.chinatax.gov.cn/loginb/&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;自然人电子税务局&#34;&gt;自然人电子税务局&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这个主要是给法人报税用的&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://etax.chinatax.gov.cn&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://etax.chinatax.gov.cn&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;关于注销&#34;&gt;关于注销&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;税务申报方面需要仔细一点, 然后就是一些文件里面的项, 我啥也不懂, 就没有改, 发现需要再缴 500, 不知道是什么, 就缴了,&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;去注销企业的时候遇到的一些问题:&lt;/p&gt;&#xA;&lt;p&gt;我使用的是 &amp;ldquo;简易注销&amp;rdquo;, 这个比较方便, 是一站式的, 办理完后需要等待 20 天的公示期,公示期结束后继续办理注销流程&lt;/p&gt;</description>
    </item>
    <item>
      <title>设计资料：样机</title>
      <link>http://localhost:1313/es/post/2024/04/design/</link>
      <pubDate>Mon, 29 Apr 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/04/design/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.caoyang2002.top/usr/uploads/2024/04/2720746638.png&#34; alt=&#34;样机&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;样机&#34;&gt;样机&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://bannermockup.com/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://bannermockup.com/&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://mockupplanet.com/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://mockupplanet.com/&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.anthonyboyd.graphics/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://www.anthonyboyd.graphics/&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.pixeden.com/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://www.pixeden.com/&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.ls.graphics&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://www.ls.graphics&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;条件&#34;&gt;条件&lt;/h2&gt;&#xA;&lt;h3 id=&#34;登录&#34;&gt;登录&lt;/h3&gt;&#xA;&lt;p&gt;grapicpear&lt;/p&gt;&#xA;&lt;h1 id=&#34;插画&#34;&gt;插画&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://dotown.maeda-design-room.net/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://dotown.maeda-design-room.net/&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://www.opendoodles.com&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   https://www.opendoodles.com&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;设计师必备 50 款免费可商用图库网站：照片、插画、纹理一网打尽&lt;/p&gt;&#xA;&lt;p&gt;免费素材图像素材工具推荐&#xA;Angel Wang・2022-10-13&#xA;大家好，本周我为大家准备了超全面的免费可商用高清图库，可能是全网最全的总结，推荐的图库类型有：照片图库、博物馆艺术品图库、图片生成器、纹理图库、插画图库、图标库，总有一种你用得到！&lt;/p&gt;</description>
    </item>
    <item>
      <title>JWT 解析</title>
      <link>http://localhost:1313/es/post/2024/04/jwt/</link>
      <pubDate>Fri, 12 Apr 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/04/jwt/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;&#34; alt=&#34;JWT&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/86937325&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   原文一&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://blog.csdn.net/weixin_39779004/article/details/110801387&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   原文二&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://b23.tv/3f7Yrct&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   视频&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;一什么是-jwt&#34;&gt;一、什么是 JWT&lt;/h1&gt;&#xA;&lt;p&gt;JSON Web Token (JWT)是一个开放标准(RFC 7519)，它定义了一种紧凑的、自包含的方式，用于作为JSON对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。&lt;/p&gt;&#xA;&lt;h1 id=&#34;二设计目标&#34;&gt;二、设计目标&lt;/h1&gt;&#xA;&lt;p&gt;不需要服务器端存储状态，安全地传递非敏感信息&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://mielgo-markdown.oss-cn-chengdu.aliyuncs.com/OIP-C-20240424140338352.jpeg&#34; alt=&#34;JWT认证方案讲解-阿里云开发者社区&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;三-json-web-token-的结构是什么样的&#34;&gt;三、 JSON Web Token 的结构是什么样的&lt;/h1&gt;&#xA;&lt;p&gt;JSON Web Token由三部分组成，例如&lt;code&gt;dafdsafdwfefeqwad.oijhdaffweqtgfdhfdws.dhshfsghhhhhwfsdke&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>搭建 NPS</title>
      <link>http://localhost:1313/es/post/2024/03/docker_pns/</link>
      <pubDate>Fri, 29 Mar 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/03/docker_pns/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ehang-io/nps/tree/master&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   github&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://ehang-io.github.io/nps/#/install&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   官方文档&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;其实所有的配置都不推荐修改，但是如果改了一个配置一定要理解为什么改，以及会影响到什么，请务必打开服务器的端口（防火墙）。&lt;/p&gt;&#xA;&lt;p&gt;以下不一定能用，因为我搞了许久才发现是我没打开服务器防火墙，而导致无法访问。&#xA;简单说：服务器的配置建议改一下，主要是你服务器可能把8080端口占用了，其余的所有都可以不用改。又不是不能用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>小米 4a 路由器刷机</title>
      <link>http://localhost:1313/es/post/2024/03/xiaomi_4a/</link>
      <pubDate>Sun, 24 Mar 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/03/xiaomi_4a/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://blog.csdn.net/yilovexing/article/details/129688708&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   查看原文&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;一获取原厂固件的-ssh-登录权限&#34;&gt;一、获取原厂固件的 ssh 登录权限&lt;/h1&gt;&#xA;&lt;p&gt;有些厂商的路由器会提供原厂固件的 ssh 登录权限，有些则需要通过原厂固件漏洞等方式来获取路由器后台登录权限，比如：小米路由器就需要先通过 OpenWRTInvasion 破解路由登录权限。&lt;/p&gt;&#xA;&lt;p&gt;小米路由器4A千兆版是利用 2.28.62 版本固件的一个 Shell 命令注入的漏洞，所以要想刷机成功就必须得降级到这个版本（2.28.62 之后的新版本应该是将这个漏洞修复了，我再次通过 OpenWRTInvasion 没获取到 ssh 登录权，所有刷的时候尽量在 2.28.62 这个固件版本下刷机）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>小米 4c 路由器刷机</title>
      <link>http://localhost:1313/es/post/2024/03/xiaomi_4c_router/</link>
      <pubDate>Sat, 23 Mar 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/03/xiaomi_4c_router/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://blog.csdn.net/xingman510/article/details/127174713&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   原文&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;介绍一下配置：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;wifi 全程不用连网&lt;/li&gt;&#xA;&lt;li&gt;win系统电脑刷机，需要下载一个刷机包&lt;/li&gt;&#xA;&lt;li&gt;windows 有 python 程序，查看方法：在命令提示符窗口输入 &lt;code&gt;python --version&lt;/code&gt;，会输出版本号&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Breed也被称为“不死鸟”，顾名思义刷入Breed后即使后续为路由器刷固件失败，也不至于让路由器变砖，并且对于以后更换固件非常友好，强烈建议刷Breed。&lt;/p&gt;</description>
    </item>
    <item>
      <title>小米路由器</title>
      <link>http://localhost:1313/es/post/2024/03/xiaomi_router/</link>
      <pubDate>Fri, 22 Mar 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/03/xiaomi_router/</guid>
      <description>&lt;p&gt;{bs-font color=&amp;quot;#FF0000&amp;quot;}刷机有风险，如果能用，请不要为了不一样而刷机，又不是不能用！{/bs-font}&lt;/p&gt;&#xA;&lt;p&gt;现在你的路由器和小米已经没有任何关系了，恭喜你上了贼船！&lt;/p&gt;&#xA;&lt;p&gt;基本介绍：&#xA;OpenWrt 是一个开源的路由系统，开放、自由的特性让这个路由系统深受欢迎！&#xA;几乎所有的商业路由器品牌都是封闭的，可以操作的空间非常小，往往需要为一些小的功能，而增加几十几百甚至上千的费用。 OpenWrt很好地解决了这个问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quartz 教程</title>
      <link>http://localhost:1313/es/post/2024/02/quartz/</link>
      <pubDate>Thu, 29 Feb 2024 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2024/02/quartz/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://quartz.jzhao.xyz&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   原作者&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&#xA;&#xA;&lt;a href=&#34;https://www.chyraw.com&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   个人配置&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;下载&#34;&gt;下载&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/caoyang2002/quartz-obsidian-webside.git&#xA;cd quartz-obsidian-webside&#xA;npm i&#xA;npx quartz build --serve&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;配置&#34;&gt;配置&lt;/h1&gt;&#xA;&lt;h2 id=&#34;布局&#34;&gt;布局&lt;/h2&gt;&#xA;&lt;p&gt;某些 emitters 可能还会输出HTML文件。为了方便定制，这些 emitters 允许您完全重新排列页面的布局。&#xA;默认页面布局可以在 &lt;code&gt;quartz.layout.ts&lt;/code&gt; 中找到。&lt;/p&gt;&#xA;&lt;p&gt;每个页面由多个不同的部分组成，这些部分包含 &lt;code&gt;QuartzComponents&lt;/code&gt;。以下代码片段列出了您可以向其中添加组件的所有有效部分：&lt;/p&gt;</description>
    </item>
    <item>
      <title>C 语言推荐书籍</title>
      <link>http://localhost:1313/es/post/2023/11/c_book/</link>
      <pubDate>Wed, 29 Nov 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/11/c_book/</guid>
      <description>&lt;h1 id=&#34;c语言系列&#34;&gt;C语言系列&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;《C漏洞与缺陷》&lt;/li&gt;&#xA;&lt;li&gt;《C语言深度解剖》&lt;/li&gt;&#xA;&lt;li&gt;《C和指针》&lt;/li&gt;&#xA;&lt;li&gt;《明解C语言》&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;c系列&#34;&gt;C++系列&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;《高质量的C/C++编程》&lt;/li&gt;&#xA;&lt;li&gt;《程序员的自我修养》&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;java系列&#34;&gt;java系列&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;《java编程思想》&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;计算机系列&#34;&gt;计算机系列&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;深入理解计算机系统&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;《大话数据结构》&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;内存&#34;&gt;内存&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;《地址的故事》&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;编程&#34;&gt;编程&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;《程序员编程故事》&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;算法&#34;&gt;算法&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;《剑指offer》&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>左耳朵耗子：技术领导力</title>
      <link>http://localhost:1313/es/post/2023/11/houle/</link>
      <pubDate>Wed, 29 Nov 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/11/houle/</guid>
      <description>&lt;h1 id=&#34;技术领导力&#34;&gt;技术领导力&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;《C语言程序设计（第二版）》&lt;/li&gt;&#xA;&lt;li&gt;《深入理解计算机系统》&lt;/li&gt;&#xA;&lt;li&gt;《UNIX环境高级编程》&lt;/li&gt;&#xA;&lt;li&gt;《UNIX网络编程》&lt;/li&gt;&#xA;&lt;li&gt;《Windows核心编程》&lt;/li&gt;&#xA;&lt;li&gt;《TCP/IP详解》&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;每个程序员都应该要读的书&#34;&gt;每个程序员都应该要读的书&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;《Code Complete (2nd edition) 》《代码大全》&lt;/li&gt;&#xA;&lt;li&gt;《The Pragmatic Programmer》 《程序员修炼之道》&lt;/li&gt;&#xA;&lt;li&gt;《Structure and interpretation of Computer Programs》&lt;/li&gt;&#xA;&lt;li&gt;《The C Programming Language》&lt;/li&gt;&#xA;&lt;li&gt;《Introduction to Algorithms 》&lt;/li&gt;&#xA;&lt;li&gt;《Design Patterns》&lt;/li&gt;&#xA;&lt;li&gt;《Refactoring: Improving the Design of Exsting Code》&lt;/li&gt;&#xA;&lt;li&gt;《The Mythical Man Month》&lt;/li&gt;&#xA;&lt;li&gt;《The Art of Computer Programming》&lt;/li&gt;&#xA;&lt;li&gt;《Compilers: Principles, Techniques and Tool》&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;推荐&#34;&gt;推荐&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;《代码大全》&lt;/li&gt;&#xA;&lt;li&gt;《程序员修炼之道》&lt;/li&gt;&#xA;&lt;li&gt;《计算机的构造和解释》&lt;/li&gt;&#xA;&lt;li&gt;《算法导论》&lt;/li&gt;&#xA;&lt;li&gt;《设计模式》&lt;/li&gt;&#xA;&lt;li&gt;《重构》&lt;/li&gt;&#xA;&lt;li&gt;《人月神话》&lt;/li&gt;&#xA;&lt;li&gt;《代码整洁之道》&lt;/li&gt;&#xA;&lt;li&gt;《Effective C++》/《More Effective C++》&lt;/li&gt;&#xA;&lt;li&gt;《Unix编程艺术》《Unix高级环境编程》&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;经典文章&#34;&gt;经典文章&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;《What every computer science major should know》&lt;/li&gt;&#xA;&lt;li&gt;《LinkedIn&amp;rsquo;s Tips for Highly Effective Code Review》&lt;/li&gt;&#xA;&lt;li&gt;《A Large-Scale Study of Programming Language and Code Quality in Github》&lt;/li&gt;&#xA;&lt;li&gt;《Optimizing Software in C++ - Agner Fog》&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>OpenWRT 教程</title>
      <link>http://localhost:1313/es/post/2023/10/openwrt/</link>
      <pubDate>Sun, 29 Oct 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/10/openwrt/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://lidrive.vip/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   OpenWRT下载地址&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;下载&#34;&gt;下载&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.caoyang2002.top/usr/uploads/2023/12/3668705269.png&#34; alt=&#34;版本&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;制作启动盘&#34;&gt;制作启动盘&lt;/h1&gt;&#xA;&lt;p&gt;将PE系统写入到U盘，window：rufus，macOS：balenaEtcher&#xA;将OpenWRT镜像、rufus（在PE系统上写盘会需要）拷贝到写完的U盘里（也可以用另一个U盘）&lt;/p&gt;&#xA;&lt;h1 id=&#34;进入bios&#34;&gt;进入BIOS&lt;/h1&gt;&#xA;&lt;p&gt;将U盘插入至路由器，根据硬件选择启动顺序为U盘，笔者的路由器是F12&lt;/p&gt;&#xA;&lt;h1 id=&#34;删除设备的磁盘分区&#34;&gt;删除设备的磁盘分区&lt;/h1&gt;&#xA;&lt;p&gt;进入PE系统之后，打开rufus（按Ctrl-Alt-F开启内部磁盘的识别），选择OpenWRT镜像并将其写入到内置的磁盘&lt;/p&gt;</description>
    </item>
    <item>
      <title>左耳朵耗子：程序员</title>
      <link>http://localhost:1313/es/post/2023/09/coder/</link>
      <pubDate>Fri, 29 Sep 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/09/coder/</guid>
      <description>&lt;p style=&#34;color:red&#34;&gt;25~35岁是每个人最宝贵的时间，应该用在刀刃上&lt;/p&gt;&#xA;&lt;p&gt;本质上来说，程序员就是个手艺人，有手艺的人就能做出别人做不出来的东西，而付费就是一件很自然的事了。&lt;/p&gt;&#xA;&lt;h1 id=&#34;提升方法&#34;&gt;提升方法&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;要去经历大多数人经历不到的， 要把时间花在那些比较难的地方。&lt;/li&gt;&#xA;&lt;li&gt;要写文章就写没有人写过的，或者是别人写过，但是自己能写得更好的。&lt;/li&gt;&#xA;&lt;li&gt;更重要的是， 技术和知识是完全可以变现的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;如何变现&#34;&gt;如何变现&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一积累&#34;&gt;一、积累&lt;/h2&gt;&#xA;&lt;p&gt;千里之行，积于跬步。任何一件事都是通过小成功达到的，所以你得确保自己有一个一个的小成功，具体来说，你得让你身边的人 有求于你，或是向别人推荐你，这就需要你能够掌握大多数人不能掌握的技术，需要你更多地去学习，并要更多的别人没有的经验和经历。&lt;/p&gt;</description>
    </item>
    <item>
      <title>群晖开发</title>
      <link>http://localhost:1313/es/post/2023/08/synology/</link>
      <pubDate>Tue, 29 Aug 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/08/synology/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://blog.csdn.net/christmans/article/details/129641264&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   原文链接&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;查看-cpu-架构&#34;&gt;查看 CPU 架构&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;uname -m：该命令会输出当前系统的CPU架构，如x86_64、i386、armv7l等。&#xA;arch：该命令可以查看Linux系统的CPU架构。&#xA;cat /proc/version：该命令可以查看系统内核的版本信息。&#xA;cat /proc/cpuinfo：该命令可以查看CPU信息，如每个物理CPU中core的个数、逻辑CPU的个数、CPU型号等。&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;http://ipkg.nslu2-linux.org/optware-ng/bootstrap/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   脚本目录&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>浮点数的存储</title>
      <link>http://localhost:1313/es/post/2023/07/float_at_mem/</link>
      <pubDate>Sat, 29 Jul 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/07/float_at_mem/</guid>
      <description>&lt;h1 id=&#34;浮点数的存储&#34;&gt;浮点数的存储&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;IEEE745 国际标准：&lt;/p&gt;&#xA;&lt;p&gt;任意一个二进制的浮点数可以表示为下面的形式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;V = (-1)^s^ * M * 2^E^&lt;/li&gt;&#xA;&lt;li&gt;(-1)^s^表示符号位，当S=0的时候V为正数，当S=1的时候V为负数&lt;/li&gt;&#xA;&lt;li&gt;M表示有效数字，大于等于1，小于2;   1&amp;lt;= M &amp;lt;2&lt;/li&gt;&#xA;&lt;li&gt;2^E^：E表示指数位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;科学计数法：123.45 = 1.2345 * 10^2^&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;举例：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;V = 5.0 f&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;二进制：101.0&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;科学计数法：1.01 * 2^2^&lt;/p&gt;</description>
    </item>
    <item>
      <title>函数栈帧的创建和销毁</title>
      <link>http://localhost:1313/es/post/2023/07/function_stack/</link>
      <pubDate>Sat, 15 Jul 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/07/function_stack/</guid>
      <description>&lt;p&gt;&lt;code&gt;C/C++&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;函数栈帧的创建和销毁&lt;/p&gt;&#xA;&lt;p&gt;在学习最基础的C语言程序的语法与使用时，但你是否有疑问？&lt;/p&gt;&#xA;&lt;p&gt;比如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;函数的作用域是怎么形成的呢？&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;局部变量是如何创建的？&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;为什么未初始化的局部变量的值是随机值或是乱码呢？&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;函数是如何传参的？&lt;/p&gt;&#xA;&lt;p&gt;传参的顺序又是怎么样的呢？&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;形参和实参的关系是什么？&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;函数的调用是怎么实现的呢？&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;函数调用结束后是怎么返回的呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>C 语言数学</title>
      <link>http://localhost:1313/es/post/2023/06/c_number/</link>
      <pubDate>Thu, 29 Jun 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/06/c_number/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;暴力算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;时间复杂度过大&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;malloc/_malloc.h&amp;gt;&#xA;#include &amp;lt;string.h&amp;gt;&#xA;#include &amp;lt;errno.h&amp;gt;&#xA;// 最大公约数&#xA;// 最小公倍数&#xA;//计算最小公倍数和最大公约数的和&#xA;int main(){&#xA;    int n = 0;&#xA;    int m = 0;&#xA;    while(scanf(&amp;#34;%d %d&amp;#34;,&amp;amp;n,&amp;amp;m) == 2){//读取两个数&#xA;        int min = n &amp;lt; m ? n : m;&#xA;        int max = n &amp;gt; m ? n : m;&#xA;        int i = min;//最大公约数&#xA;        int j = max;//最小公倍数&#xA;        while(1){&#xA;            if(n%i == 0 &amp;amp;&amp;amp; m%i == 0){&#xA;                break;&#xA;            }&#xA;            i--;&#xA;        }&#xA;        // i就是最大公约数&#xA;        while(1){&#xA;            if(j%n == 0 &amp;amp;&amp;amp; j%m == 0){&#xA;                break;&#xA;            }&#xA;            j&amp;#43;&amp;#43;;&#xA;        }&#xA;        // j就是最大公倍数&#xA;&#xA;        printf(&amp;#34;最大公倍数 %d &amp;#43; 最小公约数 %d = %d\n&amp;#34;,j,i,j&amp;#43;i);&#xA;    }&#xA;    return 0;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;辗转相除法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;两个数的&lt;em&gt;&lt;strong&gt;最大公约数&lt;/strong&gt;&lt;/em&gt;等于其中较小的数字和二者之间余数的最大公约数&lt;/p&gt;</description>
    </item>
    <item>
      <title>C 语言结构体</title>
      <link>http://localhost:1313/es/post/2023/06/c_struct/</link>
      <pubDate>Thu, 29 Jun 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/06/c_struct/</guid>
      <description>&lt;h1 id=&#34;结构体内存对齐&#34;&gt;结构体内存对齐&lt;/h1&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;struct S1{&#xA;    char c1;//1&#xA;    int i;//4&#xA;    char c2;//1&#xA;};&#xA;&#xA;struct S2{&#xA;    char c1;//1&#xA;    char c2;//1&#xA;    int i;//4&#xA;};&#xA;int main(){&#xA;    printf(&amp;#34;%d\n&amp;#34;,sizeof(struct S1));//12&#xA;    printf(&amp;#34;%d\n&amp;#34;,sizeof(struct S2));//8&#xA;    return 0;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;对齐规则：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;第一个成员在与结构体变量偏移量为0的地址处&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;其它成员变量要对齐到某个数字（对齐数）的整数倍的地址处&#xA;对齐数 = 编译默认的一个对齐数与该成员大小的&lt;strong&gt;较小值&lt;/strong&gt;。    vs中默认是8&lt;/p&gt;&#xA;&lt;p&gt;(即：第二个成员和编译器的默认对齐数比较大小,第三个成员和编译器的默认对齐数比较大小,第四个成员和编译器的默认对齐数比较大小&amp;hellip;..)&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; 命名规范</title>
      <link>http://localhost:1313/es/post/2023/05/cpp_named/</link>
      <pubDate>Mon, 29 May 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/05/cpp_named/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://codeif.xinke.org.cn&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   codeif&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;文件命名&#34;&gt;文件命名&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;所有文件&lt;/p&gt;&#xA;&lt;p&gt;头文件和原文件成对出现&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;全部小写, 可是使用下划线&amp;quot;_&amp;quot;(默认)或连字符&amp;quot;-&amp;quot;, 称完整, 不要有歧义&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;system_file.c  &amp;amp; system_file.h&lt;/li&gt;&#xA;&lt;li&gt;item_name.c&lt;/li&gt;&#xA;&lt;li&gt;item-name.c&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;类型命名&#34;&gt;类型命名&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;类, 结构体, 类型定义(Typedef), 枚举, 类型模板参数&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;每个单词首字母大写, 不使用下划线&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Number&lt;/li&gt;&#xA;&lt;li&gt;Timer&lt;/li&gt;&#xA;&lt;li&gt;File&lt;/li&gt;&#xA;&lt;li&gt;Name&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;变量命名&#34;&gt;变量命名&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;变量, 函数参数, 数据成员名&lt;/p&gt;</description>
    </item>
    <item>
      <title>mermaid 教程</title>
      <link>http://localhost:1313/es/post/2023/03/marmaid/</link>
      <pubDate>Sun, 19 Mar 2023 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2023/03/marmaid/</guid>
      <description>&lt;p&gt;mermaid可以在主流的markdown工具中使用&#xA;下面是几个常用的图示类型&lt;/p&gt;&#xA;&lt;h4 id=&#34;1思维导图&#34;&gt;1.思维导图&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空格敏感&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;mermaid&#34;&gt;mindmap&#xA;  root((思维导图))&#xA;    节点一&#xA;      记录1.1&#xA;      ::icon(fa fa-book)&#xA;      节点1.1&#xA;        记录1.1.1&#xA;    节点二&#xA;      记录2.1&#xA;      记录2.2&#xA;        节点2.1&#xA;            记录2.1.1&#xA;      &#x9;&#x9;&#x9;记录2.1.2&#xA;          &#x9;记录2.1.3&#xA;    节点三&#xA;      记录3.1&#xA;      记录3.2&lt;/div&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;基础&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;语法&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;形状&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;默认&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;mermaid&#34;&gt;mindmap&#xA;    I am the default shape&lt;/div&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;矩形&lt;/p&gt;</description>
    </item>
    <item>
      <title>字符图片</title>
      <link>http://localhost:1313/es/post/2022/07/chart_image/</link>
      <pubDate>Fri, 29 Jul 2022 09:31:37 +0800</pubDate>
      <guid>http://localhost:1313/es/post/2022/07/chart_image/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.caoyang2002.top/usr/uploads/2023/10/958002088.jpg&#34; alt=&#34;beautiful.jpg&#34;&gt;&#xA;&lt;img src=&#34;https://www.caoyang2002.top/usr/uploads/2023/10/1324992575.jpg&#34; alt=&#34;cool.jpg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;http://patorjk.com/software/taag&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   http://patorjk.com/software/taag&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&#xA;&#xA;&lt;a href=&#34;http://www.network-science.de/ascii/&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   http://www.network-science.de/ascii/&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&#xA;&#xA;&lt;a href=&#34;http://www.degraeve.com/img2txt.php&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   http://www.degraeve.com/img2txt.php&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&#xA;&#xA;&lt;a href=&#34;http://life.chacuo.net/convertfont2char&#34;&#xA;   &#xA;   &#xA;     target=&#34;_blank&#34;&#xA;     rel=&#34;noopener noreferrer&#34;&#xA;     class=&#34;external-link&#34;&#xA;   &gt;&#xA;   http://life.chacuo.net/convertfont2char&#xA;   &#xA;     &lt;span class=&#34;external-icon&#34;&gt;↗&lt;/span&gt;&#xA;   &#xA;&lt;/a&gt;&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
