<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on caoyang2002</title><link>https://caoyang2002.xyz/es/tags/rust/</link><description>Recent content in Rust on caoyang2002</description><generator>Hugo</generator><language>es-ES</language><lastBuildDate>Thu, 23 Jan 2025 01:00:04 +0800</lastBuildDate><atom:link href="https://caoyang2002.xyz/es/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>简述 Rust 中的闭包</title><link>https://caoyang2002.xyz/es/post/2025/01/rust_closure_brief/</link><pubDate>Wed, 15 Jan 2025 13:22:26 +0800</pubDate><guid>https://caoyang2002.xyz/es/post/2025/01/rust_closure_brief/</guid><description>&lt;h1 id="为什么需要闭包">为什么需要闭包？&lt;/h1>









&lt;div class="code-playground" data-language="rust">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-rust">// 问题1：函数复用
// 没有闭包时，需要传入所有参数
fn add(x: i32, base: i32) -&amp;gt; i32 { x &amp;#43; base }

// 有了闭包，可以部分应用
let base = 5;
let add_five = |x| x &amp;#43; base;

// 问题2：函数式编程需求
vec![1, 2, 3].iter().map(|x| x * 2); // 更简洁
vec![1, 2, 3].iter().map(multiply); // 需要单独定义函数

// 问题3：上下文捕获
// 没有闭包时很难处理
struct Context { value: i32 }
let ctx = Context { value: 42 };
let use_context = || println!(&amp;#34;{}&amp;#34;, ctx.value);&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;h1 id="闭包是什么">闭包是什么？&lt;/h1>
&lt;ul>
&lt;li>闭包是可以捕获其环境的匿名函数&lt;/li>
&lt;li>它&amp;quot;封闭&amp;quot;了其定义时的环境，故称&amp;quot;闭包&amp;quot;&lt;/li>
&lt;li>闭包 = 函数 + 环境&lt;/li>
&lt;/ul>
&lt;h1 id="闭包的优势">闭包的优势&lt;/h1>









&lt;div class="code-playground" data-language="rust">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-rust">// 1. 简洁的语法
let add = |a, b| a &amp;#43; b; // vs fn add(a: i32, b: i32) -&amp;gt; i32

// 2. 灵活的环境捕获
let multiplier = 2;
let double = |x| x * multiplier; // 捕获 multiplier

// 3. 支持函数式编程
let numbers: Vec&amp;lt;i32&amp;gt; = vec![1, 2, 3, 4, 5];
let even_numbers: Vec&amp;lt;i32&amp;gt; = numbers
 .into_iter()
 .filter(|x| x % 2 == 0)
 .collect();&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;h1 id="理解闭包">理解闭包&lt;/h1>
&lt;p>我用 Python 和 TypeScript 的概念来解释 Rust 的闭包：&lt;/p></description></item><item><title>Rust 中的引用</title><link>https://caoyang2002.xyz/es/post/2025/01/rust_ref/</link><pubDate>Wed, 15 Jan 2025 11:57:02 +0800</pubDate><guid>https://caoyang2002.xyz/es/post/2025/01/rust_ref/</guid><description>&lt;h1 id="引用你的快递地址和包裹">引用：你的快递地址和包裹&lt;/h1>
&lt;p>想象这样一个场景：你在网上买了个漂亮的花瓶，快递公司需要把它送到你家。快递员需要知道两个信息：&lt;/p>
&lt;ol>
&lt;li>你家的地址（引用）&lt;/li>
&lt;li>花瓶本身（值）&lt;/li>
&lt;/ol>
&lt;h2 id="为什么我们需要引用">为什么我们需要引用？&lt;/h2>
&lt;p>让我们看一个具体的问题：&lt;/p>









&lt;div class="code-playground" data-language="rust">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-rust">fn calculate_length(s: String) -&amp;gt; usize {
 s.len()
}

let s = String::from(&amp;#34;hello&amp;#34;);
let len = calculate_length(s);
println!(&amp;#34;{}&amp;#34;, s); // 编译错误！s 已经被转移了所有权&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;p>这就像你把花瓶（值）直接给了快递员（函数），花瓶就不再属于你了。但很多时候，我们只是想让快递员看看花瓶，而不是把它拿走。&lt;/p></description></item><item><title>rust 闭包</title><link>https://caoyang2002.xyz/es/post/2025/01/rust_closure/</link><pubDate>Wed, 15 Jan 2025 11:29:27 +0800</pubDate><guid>https://caoyang2002.xyz/es/post/2025/01/rust_closure/</guid><description>&lt;h2 id="从一个常见问题说起">从一个常见问题说起&lt;/h2>
&lt;p>假设你正在开发一个数据处理系统，需要对集合中的数据进行灵活的过滤和转换：&lt;/p>









&lt;div class="code-playground" data-language="rust">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-rust">let numbers = vec![1, 2, 3, 4, 5];
// 如何优雅地复用过滤逻辑？
let even_numbers = ??? // 这里怎么写
let multiplied_numbers = ??? // 这里怎么写&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;h2 id="闭包的本质">闭包的本质&lt;/h2>
&lt;p>Rust 的闭包本质上是一种特殊的数据结构，它包含：&lt;/p>
&lt;ol>
&lt;li>函数逻辑&lt;/li>
&lt;li>捕获的环境变量&lt;/li>
&lt;/ol>
&lt;p>让我们通过反编译来看闭包的真实面目：&lt;/p>









&lt;div class="code-playground" data-language="rust">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-rust">// 表面上的闭包
let multiplier = 2;
let closure = |x| x * multiplier;

// 编译器实际生成的结构（简化版）
struct Closure {
 multiplier: i32,
}

impl Closure {
 fn call(&amp;amp;self, x: i32) -&amp;gt; i32 {
 x * self.multiplier
 }
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;h2 id="闭包的三种类型">闭包的三种类型&lt;/h2>
&lt;p>通过具体案例来理解三种闭包 trait：&lt;/p></description></item><item><title>深入解释 Rust 中的 Result 和 Option 这两个核心类型</title><link>https://caoyang2002.xyz/es/post/2025/01/rust_result_option/</link><pubDate>Wed, 15 Jan 2025 11:26:02 +0800</pubDate><guid>https://caoyang2002.xyz/es/post/2025/01/rust_result_option/</guid><description>&lt;h1 id="从一个实际问题开始">从一个实际问题开始&lt;/h1>
&lt;p>假设我们在写一个文件处理程序：&lt;/p>









&lt;div class="code-playground" data-language="rust">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-rust">fn read_config_file(path: &amp;amp;str) -&amp;gt; String {
 std::fs::read_to_string(path) // 这里会返回什么？
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;p>这段代码看似简单，但隐藏着两个基本问题：&lt;/p>
&lt;ol>
&lt;li>文件可能不存在&lt;/li>
&lt;li>即使文件存在，读取过程也可能失败&lt;/li>
&lt;/ol>
&lt;p>这就是为什么 Rust 引入了 &lt;code>Result&lt;/code> 和 &lt;code>Option&lt;/code>。&lt;/p>
&lt;h2 id="option处理有与没有">&lt;code>Option&lt;/code>：处理&amp;quot;有&amp;quot;与&amp;quot;没有&amp;quot;&lt;/h2>
&lt;h3 id="option-的本质">&lt;code>Option&lt;/code> 的本质&lt;/h3>









&lt;div class="code-playground" data-language="rust">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-rust">enum Option&amp;lt;T&amp;gt; {
 Some(T), // 有值
 None, // 没有值
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;p>让我们看一个实际例子：&lt;/p>









&lt;div class="code-playground" data-language="rust">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-rust">fn find_user(id: u32) -&amp;gt; Option&amp;lt;User&amp;gt; {
 if id == 0 {
 None // 用户不存在
 } else {
 Some(User { id, ... }) // 用户存在
 }
}

// 使用方式
match find_user(1) {
 Some(user) =&amp;gt; println!(&amp;#34;Found user: {}&amp;#34;, user.name),
 None =&amp;gt; println!(&amp;#34;User not found&amp;#34;),
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;h3 id="option-的常用方法">&lt;code>Option&lt;/code> 的常用方法&lt;/h3>









&lt;div class="code-playground" data-language="rust">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-rust">let x: Option&amp;lt;i32&amp;gt; = Some(5);

// 方法1：unwrap - 危险操作
let value1 = x.unwrap(); // 如果是 None 会 panic

// 方法2：unwrap_or - 提供默认值
let value2 = x.unwrap_or(0); // None 时返回0

// 方法3：map - 变换内部值
let value3 = x.map(|n| n * 2); // Some(5) -&amp;gt; Some(10)

// 方法4：and_then - 链式操作
let value4 = x.and_then(|n| if n &amp;gt; 0 { Some(n) } else { None });&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;h2 id="result处理成功与失败">&lt;code>Result&lt;/code>：处理“成功”与“失败”&lt;/h2>
&lt;h3 id="result-的本质">&lt;code>Result&lt;/code> 的本质&lt;/h3>









&lt;div class="code-playground" data-language="rust">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-rust">enum Result&amp;lt;T, E&amp;gt; {
 Ok(T), // 成功，包含值 T
 Err(E), // 错误，包含错误 E
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;p>实际应用示例：&lt;/p></description></item></channel></rss>