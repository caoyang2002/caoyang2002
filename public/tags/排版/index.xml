<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>排版 on caoyang 2002</title>
    <link>http://localhost:1313/tags/%E6%8E%92%E7%89%88/</link>
    <description>Recent content in 排版 on caoyang 2002</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 26 Jan 2025 02:08:55 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E6%8E%92%E7%89%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue: 一个让前端开发不再痛苦的框架</title>
      <link>http://localhost:1313/post/2025/01/vue_painless_frontend_framework/</link>
      <pubDate>Fri, 24 Jan 2025 13:53:44 +0800</pubDate>
      <guid>http://localhost:1313/post/2025/01/vue_painless_frontend_framework/</guid>
      <description>&lt;h1 id=&#34;vue-一个让前端开发不再痛苦的框架&#34;&gt;Vue: 一个让前端开发不再痛苦的框架&lt;/h1&gt;&#xA;&lt;h2 id=&#34;老板又改需求了&#34;&gt;老板又改需求了?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;javascript&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-javascript&#34;&gt;// 改个文本要改三个地方&#xA;document.getElementById(&amp;#34;title&amp;#34;).innerText = &amp;#34;新标题&amp;#34;;&#xA;document.querySelector(&amp;#34;.header h1&amp;#34;).innerText = &amp;#34;新标题&amp;#34;;&#xA;document.getElementsByClassName(&amp;#34;footer&amp;#34;)[0].innerText = &amp;#34;新标题&amp;#34;;&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;这就是没用Vue的下场。数据和视图分离,改一个要改几个地方,还容易改出bug。&lt;/p&gt;&#xA;&lt;h2 id=&#34;vue是啥&#34;&gt;Vue是啥?&lt;/h2&gt;&#xA;&lt;p&gt;简单说: Vue = 数据驱动视图 + 组件化开发&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;pre&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;!-- 数据自动同步到视图 --&amp;gt;&#xA;    &amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&#xA;    &amp;lt;button @click=&amp;#34;changeTitle&amp;#34;&amp;gt;改标题&amp;lt;/button&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;export default {&#xA;  data() {&#xA;    return {&#xA;      title: &amp;#34;原标题&amp;#34;&#xA;    }&#xA;  },&#xA;  methods: {&#xA;    changeTitle() {&#xA;      // 改数据,视图自动更新&#xA;      this.title = &amp;#34;新标题&amp;#34;&#xA;    }&#xA;  }&#xA;}&#xA;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;为什么选vue&#34;&gt;为什么选Vue?&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;上手容易&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TypeScript: 静态类型，所以NB</title>
      <link>http://localhost:1313/post/2025/01/typescript_static_types/</link>
      <pubDate>Fri, 24 Jan 2025 13:46:32 +0800</pubDate>
      <guid>http://localhost:1313/post/2025/01/typescript_static_types/</guid>
      <description>&lt;h1 id=&#34;typescript-静态类型所以-nb&#34;&gt;TypeScript: 静态类型，所以 NB&lt;/h1&gt;&#xA;&lt;h2 id=&#34;你遇到过这些问题吗&#34;&gt;你遇到过这些问题吗?&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;javascript&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-javascript&#34;&gt;// 调用一个不存在的方法&#xA;obj.nonexistMethod()&#xA;&#xA;// 传错参数类型&#xA;calculateArea(&amp;#34;5&amp;#34;, &amp;#34;10&amp;#34;)&#xA;&#xA;// 对象属性拼写错误&#xA;user.namee = &amp;#34;Bob&amp;#34;&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;玩过JavaScript的同学一定很熟悉这些坑。这就是为什么我们需要 TypeScript。&lt;/p&gt;&#xA;&lt;h2 id=&#34;typescript是个啥&#34;&gt;TypeScript是个啥?&lt;/h2&gt;&#xA;&lt;p&gt;简单说:TypeScript = JavaScript + 类型系统&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;typescript&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-typescript&#34;&gt;// 变量类型&#xA;let name: string = &amp;#34;老陈&amp;#34;&#xA;&#xA;// 函数类型&#xA;function add(x: number, y: number): number {&#xA;    return x &amp;#43; y&#xA;}&#xA;&#xA;// 接口&#xA;interface User {&#xA;    id: number&#xA;    name: string&#xA;    age?: number  // 可选属性&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;为什么要用typescript&#34;&gt;为什么要用TypeScript?&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;不用写单元测试了?&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>react 技术解析</title>
      <link>http://localhost:1313/post/2025/01/react_development_pain_points_and_solutions_detailed/</link>
      <pubDate>Fri, 24 Jan 2025 13:44:21 +0800</pubDate>
      <guid>http://localhost:1313/post/2025/01/react_development_pain_points_and_solutions_detailed/</guid>
      <description>&lt;h1 id=&#34;react-开发痛点与解决方案详解&#34;&gt;React 开发痛点与解决方案详解&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-dom-操作的深层困境&#34;&gt;1. DOM 操作的深层困境&lt;/h2&gt;&#xA;&lt;h3 id=&#34;传统方式的问题&#34;&gt;传统方式的问题&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;javascript&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-javascript&#34;&gt;// 更新用户信息&#xA;$(&amp;#39;#userName&amp;#39;).text(user.name);&#xA;$(&amp;#39;#userRole&amp;#39;).text(user.role);&#xA;$(&amp;#39;#department&amp;#39;).text(user.department);&#xA;&#xA;// 更新权限信息&#xA;function updatePermissions(permissions) {&#xA;  $(&amp;#39;#permissionList&amp;#39;).empty();&#xA;  permissions.forEach(p =&amp;gt; {&#xA;    $(&amp;#39;#permissionList&amp;#39;).append(`&amp;lt;li&amp;gt;${p}&amp;lt;/li&amp;gt;`);&#xA;  });&#xA;}&#xA;&#xA;// 更新用户状态&#xA;function toggleUserStatus(status) {&#xA;  if(status === &amp;#39;active&amp;#39;) {&#xA;    $(&amp;#39;#userStatus&amp;#39;).addClass(&amp;#39;active&amp;#39;).removeClass(&amp;#39;inactive&amp;#39;);&#xA;  } else {&#xA;    $(&amp;#39;#userStatus&amp;#39;).addClass(&amp;#39;inactive&amp;#39;).removeClass(&amp;#39;active&amp;#39;);&#xA;  }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;这种操作方式存在严重问题：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;代码分散导致的维护噩梦&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DOM 操作散布在各个函数中&lt;/li&gt;&#xA;&lt;li&gt;状态变化需要手动同步多处DOM&lt;/li&gt;&#xA;&lt;li&gt;代码修改容易遗漏关联更新&lt;/li&gt;&#xA;&lt;li&gt;难以追踪数据流向&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;性能瓶颈&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Webpack：前端项目的&#34;搬运工&#34;</title>
      <link>http://localhost:1313/post/2025/01/webpack_frontend_project_carrier/</link>
      <pubDate>Fri, 24 Jan 2025 13:41:27 +0800</pubDate>
      <guid>http://localhost:1313/post/2025/01/webpack_frontend_project_carrier/</guid>
      <description>&lt;h1 id=&#34;webpack前端项目的搬运工&#34;&gt;Webpack：前端项目的&amp;quot;搬运工&amp;quot;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;你遇到过这样的问题吗&#34;&gt;你遇到过这样的问题吗？&lt;/h2&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;code-playground&#34; data-language=&#34;javascript&#34;&gt;&#xA;    &#xA;    &lt;div&gt;&#xA;        &lt;pre&gt;&#xA;                &lt;code class=&#34;language-javascript&#34;&gt;// 项目目录&#xA;src/&#xA;  ├── js/&#xA;  │   ├── user.js&#xA;  │   ├── order.js&#xA;  │   └── payment.js&#xA;  ├── css/&#xA;  │   ├── main.css&#xA;  │   └── theme.css&#xA;  └── images/&#xA;      └── logo.png&lt;/code&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;    &#xA;&#xA;    &#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;每次部署都要手动:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;合并 JS 文件&lt;/li&gt;&#xA;&lt;li&gt;压缩 CSS&lt;/li&gt;&#xA;&lt;li&gt;处理图片&lt;/li&gt;&#xA;&lt;li&gt;更新版本号&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这让我想起小时候帮妈妈打扫房间 - 东西太多，到处都是，不知从何下手。&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么会有这些问题&#34;&gt;为什么会有这些问题？&lt;/h2&gt;&#xA;&lt;h3 id=&#34;前端的特殊性&#34;&gt;前端的特殊性&lt;/h3&gt;&#xA;&lt;p&gt;浏览器需要加载:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;HTML (建筑框架)&lt;/li&gt;&#xA;&lt;li&gt;CSS (装修风格)&lt;/li&gt;&#xA;&lt;li&gt;JS (家具电器)&lt;/li&gt;&#xA;&lt;li&gt;图片等资源 (装饰品)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;每多一个文件就多一次 HTTP 请求，网页加载越慢。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
