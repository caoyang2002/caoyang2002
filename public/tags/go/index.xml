<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on caoyang 2002</title><link>https://caoyang2002.xyz/tags/go/</link><description>Recent content in Go on caoyang 2002</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 22 Jan 2025 22:41:30 +0800</lastBuildDate><atom:link href="https://caoyang2002.xyz/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 最佳实践</title><link>https://caoyang2002.xyz/post/2024/12/go/</link><pubDate>Sun, 29 Dec 2024 09:31:37 +0800</pubDate><guid>https://caoyang2002.xyz/post/2024/12/go/</guid><description>&lt;p>在 Go 项目架构中，有一些重要的设计原则和规则。我来详细说明：&lt;/p>
&lt;ol>
&lt;li>接口定义规则：&lt;/li>
&lt;/ol>









&lt;div class="code-playground" data-language="go">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-go">// ✅ 正确：接口定义在使用方(调用方)包中
package handler
type UserService interface {
 Create(ctx context.Context, user *User) error
}

// ❌ 错误：接口定义在实现方包中
package service
type UserService interface {
 Create(ctx context.Context, user *User) error
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;ol start="2">
&lt;li>依赖方向：&lt;/li>
&lt;/ol>









&lt;div class="code-playground" data-language="go">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-go">// ✅ 正确的依赖方向
handler -&amp;gt; service -&amp;gt; repository -&amp;gt; database

// ❌ 错误：不应该出现反向依赖
service -&amp;gt; handler
repository -&amp;gt; service&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;ol start="3">
&lt;li>数据模型定义：&lt;/li>
&lt;/ol>









&lt;div class="code-playground" data-language="go">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-go">// ✅ 正确：每层使用自己的数据模型
package handler
type CreateUserRequest struct { // API层模型
 Username string `json:&amp;#34;username&amp;#34;`
}

package service
type UserDTO struct { // 业务层模型
 ID uint64
 Username string
}

package repository
type UserDO struct { // 数据层模型
 ID uint64 `gorm:&amp;#34;primaryKey&amp;#34;`
 Username string
 CreatedAt time.Time
}

// ❌ 错误：直接在所有层使用相同的模型
type User struct {
 ID uint64 `json:&amp;#34;id&amp;#34; gorm:&amp;#34;primaryKey&amp;#34;`
 Username string `json:&amp;#34;username&amp;#34;`
 CreatedAt time.Time `json:&amp;#34;created_at&amp;#34;`
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;ol start="4">
&lt;li>错误处理层级：&lt;/li>
&lt;/ol>









&lt;div class="code-playground" data-language="go">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-go">// ✅ 正确：每层对错误进行适当包装
package repository
func (r *UserRepo) Create(user *UserDO) error {
 return fmt.Errorf(&amp;#34;database error: %w&amp;#34;, err)
}

package service
func (s *UserService) Create(user *UserDTO) error {
 return fmt.Errorf(&amp;#34;business error: %w&amp;#34;, err)
}

package handler
func (h *UserHandler) Create(c *gin.Context) {
 if err := h.service.Create(user); err != nil {
 c.JSON(getErrorStatus(err), ErrorResponse{err.Error()})
 return
 }
}

// ❌ 错误：直接暴露底层错误
if err := db.Create(&amp;amp;user).Error; err != nil {
 c.JSON(500, err.Error())
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;ol start="5">
&lt;li>包的组织：&lt;/li>
&lt;/ol>










&lt;div>
 &lt;pre>&lt;code class="language-" data-lang="">✅ 正确的包组织：
project/
 ├── api/
 │ └── handler/ # HTTP 处理层
 ├── internal/
 │ ├── service/ # 业务逻辑层
 │ ├── repository/ # 数据访问层
 │ └── model/ # 内部数据模型
 ├── pkg/
 │ └── util/ # 公共工具函数
 └── main.go

❌ 错误的包组织：
project/
 ├── handlers/
 ├── services/
 ├── models/
 └── main.go&lt;/code>&lt;/pre>
&lt;/div>

&lt;ol start="6">
&lt;li>依赖注入：&lt;/li>
&lt;/ol>









&lt;div class="code-playground" data-language="go">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-go">// ✅ 正确：通过构造函数注入依赖
func NewUserHandler(service UserService) *UserHandler {
 return &amp;amp;UserHandler{service: service}
}

// ❌ 错误：全局变量或直接初始化
var userService = &amp;amp;UserService{}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;ol start="7">
&lt;li>接口隔离：&lt;/li>
&lt;/ol>









&lt;div class="code-playground" data-language="go">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-go">// ✅ 正确：小接口，职责单一
type UserReader interface {
 GetUser(id uint64) (*User, error)
}

type UserWriter interface {
 CreateUser(user *User) error
}

// ❌ 错误：大接口，职责过多
type UserService interface {
 GetUser(id uint64) (*User, error)
 CreateUser(user *User) error
 UpdateUser(user *User) error
 DeleteUser(id uint64) error
 ListUsers() ([]*User, error)
 SearchUsers(query string) ([]*User, error)
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;ol start="8">
&lt;li>配置管理：&lt;/li>
&lt;/ol>









&lt;div class="code-playground" data-language="go">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-go">// ✅ 正确：集中管理配置
package config

type Config struct {
 Server ServerConfig
 DB DatabaseConfig
 Redis RedisConfig
}

// ❌ 错误：分散的配置或硬编码
var serverPort = 8080
var dbConnection = &amp;#34;root:password@tcp(localhost:3306)/db&amp;#34;&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;ol start="9">
&lt;li>上下文传递：&lt;/li>
&lt;/ol>









&lt;div class="code-playground" data-language="go">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-go">// ✅ 正确：统一使用 context 传递请求上下文
func (h *Handler) Create(c *gin.Context) {
 ctx := c.Request.Context()
 err := h.service.Create(ctx, req)
}

// ❌ 错误：不传递上下文或使用不一致的上下文
func (h *Handler) Create(c *gin.Context) {
 err := h.service.Create(req)
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;ol start="10">
&lt;li>测试组织：&lt;/li>
&lt;/ol>









&lt;div class="code-playground" data-language="go">
 
 &lt;div>
 &lt;pre>
 &lt;code class="language-go">// ✅ 正确：测试文件与源文件对应
package handler

func TestUserHandler_Create(t *testing.T) {
 // 单元测试
}

// ❌ 错误：测试代码与源码混合或测试覆盖不全
func TestAll(t *testing.T) {
 // 混合测试多个功能
}&lt;/code>&lt;/pre>
 &lt;/div>
 

 
&lt;/div>

&lt;p>遵循这些规则可以使代码：&lt;/p></description></item></channel></rss>